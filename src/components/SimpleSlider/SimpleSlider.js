import React from "react";
import Slider from "react-slick";
import { SphericalUtil } from "node-geometry-library";

// Import css files
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

// Probably unnecessary enum
const param = {
    INF: "newInfectionsToday",
    TESTS: "testsCompleted",
    DEATHS: "deathsToday",
    HOSP: "hospitalized"
}

class simpleSlider extends React.Component {
    constructor(props){
        super(props);

        this.state = {
            modalToggle: false,
            //slide 5 -> false show county rank, true show health unit data
            countySlideToggle: false,
            locationRetrieved: false,
            healthUnitData: [],
            userCountyData: [],
            userHealthUnit: "",
            userLat: 0,
            userLong: 0,
            userZoneStatus: "",
            newInfectionsChangeText: "",
            newInfectionsChangeArrow: "",
            newInfectionsPercentChange: "",
            //Heights for bars in each slide's graph
            casesGraph: [],
            testsGraph: [],
            deathsGraph: [],
            hospGraph: []
        }

        this.getHighest = this.getHighest.bind(this);
        this.setGraphHeights = this.setGraphHeights.bind(this);
        this.infectionsChange = this.infectionsChange.bind(this);
        this.toggleAboutModal = this.toggleAboutModal.bind(this);
        this.findHealthUnit = this.findHealthUnit.bind(this);
        this.toggleCountySlide = this.toggleCountySlide.bind(this);
        this.getUserLocation = this.getUserLocation.bind(this);
        this.setUserLocation = this.setUserLocation.bind(this);
        this.getHealthUnitData = this.getHealthUnitData.bind(this);
        this.getUserZone = this.getUserZone.bind(this);
    }

    componentDidMount(){
        //Check that component has received props and that props are not empty
        if(this.props && this.props.pastWeekInfections.length > 0){
            this.setGraphHeights("newInfectionsToday");
            this.setGraphHeights("testsCompleted");
            this.setGraphHeights("deathsToday");
            this.setGraphHeights("hospitalized");
            this.infectionsChange();
        }
    }

    //Get highest value object from array, used for graphs
    getHighest(property){
        //Copy data into new array to avoid mutating props
        let sortedArray = [].concat(this.props.noCommasData);
        
        //Switch statement to account for all properties needed to be checked
        switch(property){
            case param.INF:
                //Sort array by property
                sortedArray.sort((a,b) => (a.newInfectionsToday > b.newInfectionsToday ? 1 : -1));
            //Return highest sorted element and index of object in original array
            return sortedArray[sortedArray.length - 1];

            case param.TESTS:
                sortedArray.sort((a,b) => (a.testsCompleted > b.testsCompleted ? 1 : -1));
            return sortedArray[sortedArray.length - 1];

            case param.DEATHS:
                sortedArray.sort((a,b) => (a.deathsToday > b.deathsToday ? 1 : -1));
            return sortedArray[sortedArray.length - 1];

            case param.HOSP:
                sortedArray.sort((a,b) => (a.hospitalized > b.hospitalized ? 1 : -1));
            return sortedArray[sortedArray.length - 1];

            default:
                sortedArray.sort((a,b) => (a.newInfectionsToday > b.newInfectionsToday ? 1 : -1));
            return sortedArray[sortedArray.length - 1];
        }
    }

    //Set graph heights
    setGraphHeights(property) {
        //Get object with highest value for desired property
        var highest = this.getHighest(property);
        var array = [];

        switch(property){
            case param.INF:
                //Loop through all objects, compare highest valued property to the rest and divide by 100 to get percentage value
                //Add percentage values to array
                for(let i=0;i<this.props.noCommasData.length;i++){
                    let height = (this.props.noCommasData[i].newInfectionsToday / highest.newInfectionsToday) * 100;
                    array.splice(i,0,height);
                }
                //Set array of percentages to state
                this.setState({ casesGraph: array });
            break;

            case param.TESTS:
                for(let i=0;i<this.props.noCommasData.length;i++){
                    let height = (this.props.noCommasData[i].testsCompleted / highest.testsCompleted) * 100;
                    array.splice(i,0,height);
                }
                this.setState({ testsGraph: array });
            break;

            case param.DEATHS:
                for(let i=0;i<this.props.noCommasData.length;i++){
                    let height = (this.props.noCommasData[i].deathsToday / highest.deathsToday) * 100;
                    array.splice(i,0,height);
                }
                this.setState({ deathsGraph: array });
            break;

            case param.HOSP:
                for(let i=0;i<this.props.noCommasData.length;i++){
                    let height = (this.props.noCommasData[i].hospitalized / highest.hospitalized) * 100;
                    array.splice(i,0,height);
                }
                this.setState({ hospGraph: array });
            break;

            default:
                for(let i=0;i<this.props.noCommasData.length;i++){
                    let height = (this.props.noCommasData[i].newInfectionsToday / highest.newInfectionsToday) * 100;
                    array.splice(i,0,height);
                }
                this.setState({ casesGraph: array });
            break;
        }
    }

    //Determine whether infections have risen or dropped since yesterday based on props info
    infectionsChange(){
      //Set data for case increase according to bool prop
        if(this.props.newInfectionsIncrease === true){
            this.setState({
                newInfectionsChangeText: "Increase today",
                newInfectionsChangeArrow: "↑"
            })
        } else {
            this.setState({
                newInfectionsChangeText: "Decrease today",
                newInfectionsChangeArrow: "↓"
            })
        }
    }
    
    toggleAboutModal(){
        this.setState({ modalToggle: !this.state.modalToggle })
    }
    
    //Find closest testing center to user location and determine health unit from that
    findHealthUnit(){
      var array = [];
      let lat = this.state.userLat;
      let long = this.state.userLong;

      //Get distances from user to all testing centers
      for (let i=0;i<this.props.healthUnits.length;i++){
        let dist = SphericalUtil.computeDistanceBetween({'lat': lat, 'lng': long}, {'lat': this.props.healthUnits[i].latitude, 'lng': this.props.healthUnits[i].longitude});
        array.splice(i,0,{key: i, dist: dist});
      }

      //Sort array of distances, first element is closest testing center
      array.sort((a,b) => a.dist > b.dist ? 1 : -1);
      this.setState({ healthUnitData: this.props.healthUnits[array[0].key], userHealthUnit: this.props.healthUnits[array[0].key].PHU});      
      this.getHealthUnitData();
      this.getUserZone();
    }

    //Get user's location
    getUserLocation(){
      if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(this.setUserLocation);
      } else {
         console.log("Geolocation not supported");
      }
    }

    //Set user long and lat to state, and set location retrieved flag to true
    setUserLocation(location){
      this.setState({ userLat: location.coords.latitude, userLong: location.coords.longitude, locationRetrieved: true });
      this.findHealthUnit();
    }
  
    toggleCountySlide(toggle){
      this.setState({ countySlideToggle: toggle })
    }

    //Get data for user's health unit
    getHealthUnitData(){
      var index;
      var unit = this.state.userHealthUnit;

      //Split string of health unit name to be able to search for first word in countyName
      unit = unit.split(" ");
      for(let i=0;i<this.props.countyData.length;i++){
        let name = this.props.countyData[i].countyName;
        if(name.search(unit[0]) !== -1)
          index = i;
      }
      this.setState({ userCountyData: this.props.countyData[index]});
    }

    //Find user's health unit in zone data and set to state
    getUserZone(){
      for(let i=0;i<this.props.zoneStatus.length;i++){
        if(this.state.userHealthUnit === this.props.zoneStatus[i].Reporting_PHU)
          this.setState({ userZoneStatus: this.props.zoneStatus[i].Status_PHU })
      }
    }

  render() {
    var settings = {
        arrows: true,
        dots: true,
        infinite: true,
        fade: true,
        speed: 500,
        slidesToShow: 1,
        slidesToScroll: 1,
        className: 'slider',
        adaptiveHeight: true
    }

    // First we get the viewport height and we multiple it by 1% to get a value for a vh unit
    let vh = window.innerHeight * 0.01;
    // Then we set the value in the --vh custom property to the root of the document
    document.documentElement.style.setProperty('--vh', `${vh}px`);

    //Remove negative sign if change is negative
    let infectionPercentChange = String(this.props.todaysData.newInfectionsPercentChange);
    infectionPercentChange = infectionPercentChange.replace("-","");

    //If props are received and not empty and not "#N/A" then render county data
    let renderCountyData = this.props && this.props.countyData.length > 0 && this.props.countyData[1].cases !== "#N/A" ?
        this.props.countyData.map(item =>{
        //Replace underscores with spaces in county name
        let name = item.countyName.replace(/_/g," ");
        return(
            <li className="county-list">
                <span className="county-rank">{item.rank}</span>
                <span className="county-name">{name}</span>
                <span className="county-cases">{item.cases}</span>
            </li>
        )}) : <span></span>;

    return (
    <div className="inner">
        <button className="about-button" onClick={this.toggleAboutModal}>About this project</button>
        <div className={this.state.modalToggle === false ? "about-modal hidden" : "about-modal visible"}>
        <svg width="190" height="56" viewBox="0 0 190 56" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g clip-path="url(#clip0)">
          <path d="M184.825 28.4738C184.029 27.4579 182.978 26.7861 181.749 26.5694C180.519 26.3527 179.302 26.6244 178.301 27.3235C178.256 25.3698 177.799 23.5381 177.042 21.7507C179.706 22.1231 182.074 20.3031 182.523 17.7556C182.894 15.097 181.069 12.7322 178.516 12.2821C175.947 11.9264 173.612 13.5577 173.069 16.0885C171.644 14.7673 169.981 13.6957 168.252 13.0016C170.381 11.4312 170.818 8.39528 169.244 6.26917C167.669 4.14306 164.627 3.70397 162.498 5.27429C160.48 6.76693 159.981 9.59752 161.35 11.7846C159.393 11.8286 157.558 12.2834 155.768 13.0379C156.139 10.3793 154.314 8.01452 151.761 7.56442C149.114 7.09765 146.651 8.90102 146.28 11.5596C145.925 14.1238 147.561 16.4553 150.097 16.9997C148.775 18.4203 147.702 20.0797 147.008 21.8057C145.433 19.6796 142.391 19.2405 140.262 20.8108C138.133 22.3811 137.695 25.4171 139.27 27.5432C140.767 29.5583 143.603 30.0584 145.793 28.6935C145.839 30.6472 146.296 32.4789 147.053 34.2663C144.389 33.8939 142.021 35.7139 141.572 38.2614C141.123 40.809 143.026 43.2848 145.578 43.7349C148.148 44.0906 150.482 42.4593 151.026 39.9284C152.45 41.2497 154.113 42.3213 155.843 43.0154C153.714 44.5858 153.276 47.6217 154.851 49.7478C156.426 51.8739 159.468 52.313 161.597 50.7427C163.615 49.2501 164.114 46.4195 162.745 44.2324C164.702 44.1883 166.537 43.7336 168.327 42.9791C167.956 45.6377 169.781 48.0025 172.334 48.4526C174.997 48.825 177.365 47.0049 177.815 44.4574C178.169 41.8932 176.533 39.5617 173.997 39.0173C175.32 37.5967 176.392 35.9373 177.087 34.2113C178.661 36.3374 181.703 36.7765 183.832 35.2062C185.961 33.6359 186.399 30.5999 184.825 28.4738ZM180.418 34.1176C179.378 33.9342 178.532 33.2014 178.209 32.2689C178.07 31.9525 177.82 31.7138 177.441 31.6471L176.78 31.5304L172.336 30.7469C172.515 31.9458 173.422 32.884 174.651 33.1007L175.312 33.2174C174.618 34.9434 173.657 36.5251 172.351 37.8514L171.961 37.2963C171.26 36.2971 169.97 35.875 168.847 36.1634L170.405 38.3838L170.95 39.161L171.807 40.3822C171.885 40.4933 171.963 40.6043 172.057 40.621C172.23 40.7486 172.419 40.782 172.625 40.721C173.62 40.6046 174.61 41.071 175.233 41.9592C176.168 43.2915 175.852 45.0842 174.534 45.9221C173.217 46.7599 171.404 46.5375 170.564 45.2219C169.94 44.3337 169.934 43.2625 170.29 42.3523C170.434 42.0859 170.406 41.6918 170.173 41.3588L170.033 41.0424L167.462 37.3786C166.807 38.3331 166.763 39.6874 167.464 40.6866L167.854 41.2417C166.158 42.0129 164.34 42.3733 162.477 42.434L162.61 41.6792C162.826 40.4526 162.253 39.2813 161.185 38.7039L160.719 41.3458L160.403 43.1385L160.287 43.7989C160.22 44.1763 160.359 44.4927 160.61 44.7315C161.377 45.3533 161.684 46.3801 161.517 47.3237C161.234 48.9277 159.789 49.9375 158.182 49.6541C156.575 49.3707 155.562 47.9274 155.845 46.3234C156.028 45.2856 156.761 44.4421 157.695 44.1203C158.012 43.9816 158.251 43.7319 158.318 43.3545L158.434 42.694L158.734 40.9957L159.2 38.3538C157.999 38.5312 157.059 39.4357 156.843 40.6623L156.726 41.3227C154.997 40.6286 153.411 39.6681 152.082 38.3635L152.638 37.975C153.638 37.2759 154.06 35.9883 153.771 34.8671L150.085 37.525L149.546 37.819C149.307 38.0687 149.162 38.3351 149.096 38.7125C149.213 39.7061 148.746 40.6939 147.857 41.3154C146.523 42.2476 144.727 41.9309 143.886 40.6152C143.046 39.2996 143.268 37.4903 144.585 36.6524C145.474 36.031 146.548 36.0256 147.46 36.381C147.727 36.5254 148.122 36.4977 148.455 36.2647L149.678 35.4102L150.456 34.8664L152.68 33.3128C151.723 32.6576 150.383 32.5186 149.366 33.3121L148.81 33.7005C148.036 32.0075 147.674 30.1924 147.612 28.333L148.273 28.4497C149.502 28.6665 150.676 28.095 151.253 27.0294L146.904 26.2626L146.243 26.1459C145.864 26.0792 145.548 26.2179 145.309 26.4677C144.67 27.3278 143.641 27.6329 142.601 27.4495C140.994 27.1661 139.981 25.7228 140.264 24.1188C140.547 22.5148 141.992 21.505 143.599 21.7884C144.639 21.9717 145.485 22.7045 145.808 23.6371C145.947 23.9535 146.197 24.1922 146.575 24.2589L148.939 24.6756L149.033 24.6923L151.586 25.1424C151.408 23.9435 150.501 23.0053 149.272 22.7886L148.61 22.6719C149.304 20.9459 150.265 19.3642 151.572 18.0379L151.961 18.593C152.662 19.5922 153.953 20.0143 155.076 19.7259L152.505 16.0622L152.115 15.5071C151.882 15.174 151.615 15.0296 151.22 15.0573C150.224 15.1737 149.234 14.7072 148.611 13.819C147.676 12.4868 147.992 10.6941 149.31 9.85622C150.644 8.92403 152.44 9.24077 153.281 10.5564C153.904 11.4446 153.91 12.5158 153.555 13.426C153.41 13.6924 153.438 14.0864 153.672 14.4195L154.529 15.6408L155.074 16.4179L156.632 18.6384C157.288 17.6839 157.426 16.3462 156.631 15.3304L156.241 14.7753C157.937 14.0041 159.755 13.6437 161.618 13.583L161.501 14.2435C161.285 15.4701 161.858 16.6413 162.926 17.2188L163.392 14.5769L163.692 12.8785L163.808 12.2181C163.875 11.8407 163.735 11.5243 163.485 11.2855C162.717 10.6637 162.317 9.62019 162.5 8.58231C162.782 6.97831 164.228 5.96844 165.835 6.25183C167.442 6.53522 168.455 7.97852 168.172 9.58252C167.989 10.6204 167.255 11.4639 166.321 11.7856C166.004 11.9243 165.765 12.1741 165.699 12.5515L165.582 13.2119L165.283 14.9103L164.817 17.5522C166.018 17.3748 166.958 16.4703 167.174 15.2437L167.29 14.5832C169.02 15.2774 170.605 16.2379 171.935 17.5425L171.379 17.9309C170.378 18.6301 169.956 19.9177 170.246 21.0389L172.47 19.4852L173.248 18.9415L174.471 18.087C174.71 17.8372 174.854 17.5709 174.921 17.1934C174.809 15.6171 175.926 14.2575 177.522 14.0525C178.517 13.9361 179.507 14.4025 180.13 15.2907C181.065 16.623 180.749 18.4157 179.432 19.2535C178.542 19.875 177.469 19.8803 176.557 19.5249C176.29 19.3806 175.895 19.4082 175.562 19.6413L175.1 20.0464L171.431 22.6099C172.388 23.265 173.745 23.3097 174.746 22.6106L175.301 22.2221C176.075 23.9152 176.438 25.7302 176.5 27.5896L175.743 27.4562C174.514 27.2395 173.341 27.811 172.763 28.8765L175.411 29.3433L175.505 29.36L177.963 29.7934C178.341 29.8601 178.658 29.7214 178.897 29.4717C179.425 28.6892 180.47 28.2897 181.416 28.4564C183.023 28.7398 184.036 30.1831 183.753 31.7871C183.47 33.3911 182.025 34.401 180.418 34.1176Z" fill="#E1643A"/>
          <path fill-rule="evenodd" clip-rule="evenodd" d="M164.829 30.2013C164.167 30.0846 163.794 29.4351 163.894 28.869L164.26 26.7932C164.376 26.1328 165.027 25.761 165.594 25.8611C166.161 25.9611 166.629 26.6272 166.529 27.1933L166.163 29.2691C166.046 29.9296 165.491 30.318 164.829 30.2013ZM164.998 35.8739C164.715 35.8239 164.448 35.6795 164.292 35.4575C162.623 33.3147 159.692 32.7979 157.39 34.2405C156.835 34.629 156.095 34.4012 155.705 33.8461C155.316 33.291 155.543 32.5529 156.099 32.1644C159.401 30.0227 163.75 30.7895 166.215 33.9482C166.605 34.5033 166.472 35.2581 166.01 35.6632C165.693 35.8019 165.377 35.9406 164.998 35.8739ZM157.749 27.7854C157.649 28.3516 158.022 29.001 158.684 29.1177C159.345 29.2344 159.901 28.846 160.018 28.1855L160.384 26.1098C160.484 25.5437 160.016 24.8775 159.449 24.7775C158.882 24.6775 158.231 25.0492 158.115 25.7097L157.749 27.7854Z" fill="#E1643A"/>
          </g>
          <path d="M8.51842 35.448C13.3824 35.448 16.3584 32.408 16.3584 27.416C16.3584 22.36 13.2864 19.416 8.51842 19.416C3.71842 19.416 0.646423 22.36 0.646423 27.416C0.646423 32.408 3.62242 35.448 8.51842 35.448ZM8.51842 23.384C10.7264 23.384 12.0064 24.952 12.0064 27.384C12.0064 29.848 10.7584 31.448 8.48642 31.448C6.24642 31.448 5.03042 29.848 5.03042 27.384C5.03042 24.952 6.27842 23.384 8.51842 23.384Z" fill="white"/>
          <path d="M21.8877 26.104C21.8877 24.376 22.9117 23.352 24.6717 23.352C26.4957 23.352 27.1997 24.536 27.1997 26.104V35H31.5517V24.856C31.5517 21.592 30.1757 19.416 26.8797 19.416C24.4477 19.416 22.6237 20.6 21.9197 24.088H21.8877V19.832H17.5037V35H21.8877V26.104Z" fill="white"/>
          <path d="M43.6544 26.424L47.8784 25.816C47.2704 21.752 45.2864 19.416 40.5184 19.416C35.7504 19.416 32.6464 22.392 32.6464 27.512C32.6464 32.76 35.8144 35.448 40.6144 35.448C45.1584 35.448 47.3664 32.92 47.8784 28.952L43.6864 28.152C43.3024 30.072 42.5344 31.448 40.5184 31.448C38.4704 31.448 37.1264 30.104 37.1264 27.384C37.1264 24.6 38.5344 23.384 40.4864 23.384C42.4384 23.384 43.3024 24.664 43.6544 26.424Z" fill="white"/>
          <path d="M56.3622 35.448C61.2262 35.448 64.2022 32.408 64.2022 27.416C64.2022 22.36 61.1302 19.416 56.3622 19.416C51.5622 19.416 48.4902 22.36 48.4902 27.416C48.4902 32.408 51.4662 35.448 56.3622 35.448ZM56.3622 23.384C58.5702 23.384 59.8502 24.952 59.8502 27.384C59.8502 29.848 58.6022 31.448 56.3302 31.448C54.0902 31.448 52.8742 29.848 52.8742 27.384C52.8742 24.952 54.1222 23.384 56.3622 23.384Z" fill="white"/>
          <path d="M74.5634 35L80.1954 19.832H75.6514L73.6994 25.784C73.1554 27.448 72.6434 29.144 72.1314 30.744H72.0034C71.5234 29.112 70.9794 27.448 70.4354 25.784L68.5474 19.832H63.8114L69.4754 35H74.5634Z" fill="white"/>
          <path d="M84.9234 18.232V15.384H80.3794V18.232H84.9234ZM84.8594 35V19.832H80.4754V35H84.8594Z" fill="white"/>
          <path d="M93.6352 31.512C91.3952 31.512 90.4352 30.008 90.4352 27.512C90.4352 24.856 91.4272 23.32 93.6352 23.32C95.6192 23.32 96.8352 24.856 96.8352 27.32V27.608C96.8352 30.104 95.6192 31.512 93.6352 31.512ZM96.8352 35H101.187V15.384H96.8352V23.96H96.7712C96.0352 20.728 94.3712 19.384 91.7472 19.416C88.0992 19.384 86.1152 22.392 86.1152 27.512C86.1152 32.44 88.0032 35.448 91.6832 35.448C94.2752 35.448 96.0032 34.104 96.7392 30.904H96.8352V35Z" fill="white"/>
          <path d="M102.442 32.39V35H105.088V32.39H102.442Z" fill="white"/>
          <path d="M106.518 32.318C106.518 33.938 107.346 35.252 109.326 35.252C110.262 35.252 110.694 35.126 111.342 34.928L111.072 32.66C110.766 32.732 110.334 32.858 109.956 32.858C109.218 32.858 108.966 32.534 108.966 31.85V28.52H111.216V26.468H108.966V24.326H106.518V26.468H105.528V28.52H106.518V32.318Z" fill="white"/>
          <path d="M115.987 35.252C118.723 35.252 120.397 33.542 120.397 30.734C120.397 27.89 118.669 26.234 115.987 26.234C113.287 26.234 111.559 27.89 111.559 30.734C111.559 33.542 113.233 35.252 115.987 35.252ZM115.987 28.466C117.229 28.466 117.949 29.348 117.949 30.716C117.949 32.102 117.247 33.002 115.969 33.002C114.709 33.002 114.025 32.102 114.025 30.716C114.025 29.348 114.727 28.466 115.987 28.466Z" fill="white"/>
          <path d="M124.948 33.038C123.688 33.038 123.148 32.192 123.148 30.788C123.148 29.294 123.706 28.43 124.948 28.43C126.064 28.43 126.748 29.294 126.748 30.68V30.842C126.748 32.246 126.064 33.038 124.948 33.038ZM126.748 35H129.196V23.966H126.748V28.79H126.712C126.298 26.972 125.362 26.216 123.886 26.234C121.834 26.216 120.718 27.908 120.718 30.788C120.718 33.56 121.78 35.252 123.85 35.252C125.308 35.252 126.28 34.496 126.694 32.696H126.748V35Z" fill="white"/>
          <path d="M133.567 33.2C132.631 33.2 132.307 32.786 132.307 32.264C132.307 31.796 132.739 31.472 133.459 31.472H135.295V31.724C135.295 32.588 134.611 33.2 133.567 33.2ZM135.295 35H137.743V29.708C137.743 27.53 136.663 26.27 134.071 26.27C131.425 26.27 130.381 27.548 130.165 29.33L132.469 29.654C132.631 28.664 133.153 28.304 133.963 28.304C134.899 28.304 135.295 28.808 135.295 29.726V30.086H133.081C130.831 30.086 129.913 31.148 129.913 32.696C129.913 34.37 131.029 35.18 132.505 35.18C133.945 35.18 134.881 34.37 135.259 32.912H135.295V35Z" fill="white"/>
          <path d="M139.572 37.898C141.714 37.898 142.83 37.034 143.64 34.946L146.952 26.468H144.306L143.442 29.654C143.226 30.446 142.974 31.31 142.704 32.21H142.56C142.29 31.31 142.002 30.392 141.768 29.6L140.76 26.468H138.078L141.3 34.856C140.922 35.72 140.49 35.846 139.608 35.846C139.248 35.846 138.888 35.792 138.51 35.72L138.222 37.79C138.654 37.844 138.996 37.898 139.572 37.898Z" fill="white"/>
          <defs>
          <clipPath id="clip0">
          <rect width="48" height="48" fill="white" transform="translate(142.532 0.197144) rotate(10)"/>
          </clipPath>
          </defs>
          </svg>
          <span className="modal-question">Where does the data come from?</span>
          <span className="modal-answer">Our data comes directly from the Government of Ontario. Please visit <a href="https://data.ontario.ca/">data.ontario.ca</a> for more information.</span>
        </div>
        <div className={this.props.noData === true ? "no-data-show" : "no-data-hide"} >
            <span className="no-data-heading">today's data not available yet</span>
            <span className="no-data-text">check back soon, we'll update as soon as it's here</span>
        </div>
        <Slider {...settings} >
            <div className="slider-slide slide-1">
              <div className="slide-text">
                <div className="sh">
                  <span className="report-date">{this.props.todaysData.date}</span>
                </div>
                <div className="sb">
                  <div className="sb-inner">
                    <svg width="32" height="33" viewBox="0 0 32 33" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <g clipPath="url(#clip0)">
                      <path d="M31.2159 16.8447C30.6855 16.1674 29.9846 15.7195 29.1652 15.5751C28.3459 15.4306 27.5341 15.6117 26.867 16.0778C26.8367 14.7753 26.5321 13.5542 26.0274 12.3626C27.8033 12.6109 29.3819 11.3975 29.6814 9.69919C29.9289 7.92682 28.7122 6.35027 27.0105 6.0502C25.2976 5.81304 23.7411 6.9006 23.3786 8.58784C22.4292 7.70699 21.3204 6.99261 20.1672 6.52985C21.5866 5.48297 21.8785 3.459 20.8286 2.04159C19.7788 0.624184 17.7508 0.331454 16.3315 1.37834C14.9863 2.37343 14.6535 4.26049 15.5662 5.71857C14.2613 5.7479 13.038 6.05108 11.8446 6.55407C12.0921 4.7817 10.8754 3.20515 9.17363 2.90509C7.40886 2.59391 5.76715 3.79616 5.51962 5.56852C5.28318 7.27799 6.37385 8.83231 8.0645 9.19528C7.18265 10.1424 6.46769 11.2486 6.00484 12.3993C4.95503 10.9819 2.92705 10.6891 1.5077 11.736C0.0883442 12.7829 -0.20355 14.8069 0.846269 16.2243C1.84415 17.5677 3.73498 17.9011 5.19518 16.9911C5.22546 18.2936 5.53004 19.5147 6.03479 20.7063C4.25893 20.4581 2.68025 21.6714 2.38078 23.3698C2.08132 25.0681 3.34997 26.7187 5.05172 27.0187C6.76456 27.2559 8.32106 26.1683 8.68355 24.4811C9.63302 25.362 10.7418 26.0763 11.895 26.5391C10.4756 27.586 10.1837 29.61 11.2335 31.0274C12.2834 32.4448 14.3113 32.7375 15.7307 31.6906C17.0759 30.6955 17.4087 28.8085 16.496 27.3504C17.8009 27.321 19.0241 27.0179 20.2176 26.5149C19.9701 28.2872 21.1868 29.8638 22.8886 30.1639C24.6644 30.4121 26.2431 29.1988 26.5426 27.5004C26.779 25.791 25.6883 24.2366 23.9977 23.8737C24.8795 22.9266 25.5945 21.8204 26.0573 20.6697C27.1072 22.0871 29.1351 22.3798 30.5545 21.3329C31.9738 20.286 32.2657 18.2621 31.2159 16.8447ZM28.2779 20.6072C27.5846 20.485 27.0209 19.9964 26.8056 19.3747C26.7128 19.1638 26.5459 19.0047 26.2938 18.9602L25.8526 18.8824L22.8903 18.3601C23.0093 19.1594 23.6139 19.7848 24.4332 19.9293L24.8744 20.0071C24.4116 21.1578 23.7707 22.2122 22.9 23.0964L22.6403 22.7263C22.1729 22.0602 21.3127 21.7788 20.5639 21.9711L21.6026 23.4514L21.9662 23.9695L22.5375 24.7836C22.5894 24.8577 22.6414 24.9317 22.7044 24.9428C22.8194 25.0279 22.9454 25.0501 23.0826 25.0095C23.7461 24.9319 24.4061 25.2428 24.8216 25.835C25.4449 26.7232 25.2341 27.9183 24.3558 28.4768C23.4775 29.0354 22.2688 28.8872 21.7086 28.0101C21.2931 27.418 21.2891 26.7038 21.5261 26.097C21.6224 25.9194 21.6037 25.6567 21.4479 25.4347L21.3551 25.2237L19.6412 22.7812C19.2041 23.4176 19.1748 24.3204 19.6423 24.9866L19.902 25.3566C18.7715 25.8707 17.5594 26.111 16.3175 26.1515L16.4062 25.6483C16.5504 24.8305 16.1682 24.0497 15.4562 23.6647L15.1456 25.426L14.9349 26.6211L14.8573 27.0614C14.8129 27.313 14.9057 27.524 15.0726 27.6831C15.5844 28.0976 15.7886 28.7822 15.6777 29.4113C15.4891 30.4806 14.5256 31.1538 13.4541 30.9649C12.3827 30.776 11.7075 29.8138 11.896 28.7444C12.018 28.0525 12.5071 27.4902 13.1298 27.2757C13.3411 27.1832 13.5004 27.0168 13.5448 26.7651L13.6224 26.3248L13.8221 25.1926L14.1326 23.4313C13.3319 23.5496 12.7057 24.1526 12.5615 24.9703L12.4839 25.4106C11.3307 24.9479 10.2739 24.3075 9.38742 23.4378L9.75801 23.1788C10.4251 22.7127 10.7064 21.8543 10.5133 21.1069L8.05626 22.8788L7.69676 23.0748C7.53743 23.2413 7.44113 23.4189 7.39676 23.6705C7.47493 24.3329 7.16385 24.9914 6.57089 25.4057C5.68147 26.0272 4.48394 25.816 3.92373 24.939C3.36352 24.0619 3.51123 22.8557 4.38957 22.2971C4.98252 21.8828 5.698 21.8792 6.3061 22.1162C6.48409 22.2124 6.74729 22.194 6.96965 22.0386L7.78496 21.4689L8.30379 21.1064L9.78617 20.0706C9.14832 19.6339 8.25484 19.5412 7.57668 20.0702L7.20609 20.3291C6.69024 19.2005 6.44869 17.9904 6.40732 16.7508L6.84851 16.8286C7.66787 16.9731 8.44991 16.5921 8.83511 15.8818L5.93584 15.3706L5.49464 15.2928C5.24253 15.2483 5.03127 15.3408 4.87194 15.5072C4.44589 16.0807 3.76015 16.2841 3.06685 16.1618C1.99538 15.9729 1.32021 15.0107 1.50876 13.9414C1.69731 12.872 2.66086 12.1988 3.73233 12.3877C4.42563 12.51 4.98936 12.9985 5.20468 13.6202C5.29746 13.8311 5.46436 13.9903 5.71647 14.0347L7.29216 14.3126L7.35519 14.3237L9.05694 14.6237C8.93792 13.8245 8.33335 13.199 7.51399 13.0545L7.0728 12.9767C7.53564 11.826 8.17648 10.7716 9.04724 9.88742L9.30693 10.2575C9.77435 10.9236 10.6346 11.205 11.3833 11.0128L9.66942 8.57026L9.40974 8.20019C9.25393 7.97814 9.07594 7.8819 8.81273 7.90034C8.14918 7.97792 7.48915 7.66696 7.07366 7.07484C6.45042 6.18665 6.66116 4.99152 7.5395 4.43296C8.42892 3.8115 9.62645 4.02265 10.1867 4.89972C10.6021 5.49185 10.6062 6.206 10.3692 6.81279C10.2729 6.99038 10.2916 7.2531 10.4474 7.47515L11.0187 8.28932L11.3823 8.80742L12.421 10.2877C12.8581 9.65138 12.9504 8.75964 12.4199 8.08239L12.1602 7.71231C13.2907 7.1982 14.5028 6.95793 15.7447 6.91748L15.6671 7.3578C15.5229 8.17552 15.9051 8.95635 16.6171 9.34132L16.9276 7.58007L17.1273 6.44783L17.2049 6.00752C17.2493 5.75591 17.1565 5.54498 16.9896 5.38583C16.4778 4.9713 16.2106 4.2756 16.3326 3.58368C16.5211 2.51435 17.4847 1.8411 18.5561 2.03003C19.6276 2.21896 20.3028 3.18116 20.1142 4.25049C19.9922 4.94241 19.5031 5.50475 18.8804 5.71924C18.6692 5.8117 18.5098 5.97818 18.4655 6.22979L18.3878 6.6701L18.1882 7.80233L17.8776 9.56359C18.6783 9.44534 19.3046 8.84233 19.4487 8.0246L19.5264 7.58429C20.6795 8.04706 21.7364 8.68741 22.6228 9.55715L22.2522 9.81609C21.5852 10.2822 21.3038 11.1406 21.497 11.8881L22.9794 10.8523L23.4982 10.4898L24.3135 9.92011C24.4728 9.75364 24.5691 9.57604 24.6135 9.32444C24.5388 8.27355 25.2836 7.36714 26.3475 7.23045C27.011 7.15288 27.671 7.46383 28.0865 8.05595C28.7098 8.94414 28.499 10.1393 27.6207 10.6978C27.0277 11.1121 26.3123 11.1157 25.7042 10.8788C25.5262 10.7825 25.263 10.801 25.0406 10.9563L24.733 11.2264L22.2871 12.9354C22.925 13.3722 23.8295 13.4019 24.4966 12.9358L24.8672 12.6769C25.383 13.8056 25.6246 15.0156 25.666 16.2552L25.1617 16.1663C24.3424 16.0218 23.5603 16.4028 23.1751 17.1132L24.9399 17.4243L25.0029 17.4354L26.6417 17.7244C26.8938 17.7689 27.105 17.6764 27.2644 17.5099C27.6163 16.9882 28.3131 16.722 28.9434 16.8331C30.0149 17.022 30.69 17.9842 30.5015 19.0536C30.3129 20.1229 29.3494 20.7961 28.2779 20.6072Z" fill="#E1643A"/>
                      <path fillRule="evenodd" clipRule="evenodd" d="M17.8861 17.9974C17.4449 17.9196 17.1964 17.4866 17.2629 17.1092L17.5069 15.7254C17.5846 15.2851 18.0182 15.0372 18.3963 15.1039C18.7745 15.1706 19.0861 15.6147 19.0196 15.9921L18.7756 17.3759C18.6979 17.8163 18.3273 18.0752 17.8861 17.9974ZM17.9992 21.7791C17.8101 21.7458 17.6321 21.6495 17.5282 21.5015C16.4154 20.073 14.4615 19.7285 12.9272 20.6902C12.5566 20.9491 12.0635 20.7973 11.8038 20.4273C11.5441 20.0572 11.6959 19.5651 12.0665 19.3061C14.2679 17.8783 17.1671 18.3895 18.8104 20.4953C19.0701 20.8654 18.9814 21.3686 18.6738 21.6386C18.4626 21.7311 18.2513 21.8236 17.9992 21.7791ZM13.1661 16.3868C13.0995 16.7643 13.3481 17.1972 13.7893 17.275C14.2305 17.3528 14.6011 17.0939 14.6788 16.6536L14.9228 15.2697C14.9893 14.8923 14.6777 14.4482 14.2995 14.3815C13.9214 14.3149 13.4877 14.5627 13.4101 15.003L13.1661 16.3868Z" fill="#E1643A"/>
                      </g>
                      <defs>
                      <clipPath id="clip0">
                      <rect width="32" height="32" fill="white" transform="translate(0 0.535294)"/>
                      </clipPath>
                      </defs>
                    </svg>
                    <span className="small-stat"><em>{this.state.newInfectionsChangeArrow}</em> {infectionPercentChange}</span>
                    <span className="small-title">{this.state.newInfectionsChangeText}</span>
                    <span className="big-stat"><em className={this.props.todaysData.recordHigh === "true" ? "record-show" : "record-hide"}>new daily record</em> {this.props.todaysData.newInfectionsToday}</span>
                    <h2>New Infections</h2>
                  </div>
                </div>
                <div className="sf">
                  <div className="graph">
                    <span className="bar-1 bar-today" style={{height: `${this.state.casesGraph[6]}%` }}>&nbsp;</span>
                    <span className="bar-2" style={{height: `${this.state.casesGraph[5]}%` }}>&nbsp;</span>
                    <span className="bar-3" style={{height: `${this.state.casesGraph[4]}%` }}>&nbsp;</span>
                    <span className="bar-4" style={{height: `${this.state.casesGraph[3]}%` }}>&nbsp;</span>
                    <span className="bar-5" style={{height: `${this.state.casesGraph[2]}%` }}>&nbsp;</span>
                    <span className="bar-6" style={{height: `${this.state.casesGraph[1]}%` }}>&nbsp;</span>
                    <span className="bar-7" style={{height: `${this.state.casesGraph[0]}%` }}>&nbsp;</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="slider-slide slide-2">
              <div className="slide-text">
                <div className="sh">
                  <span className="report-date">{this.props.todaysData.date}</span>
                </div>
                <div className="sb">
                  <div className="sb-inner">
                    <svg width="32" height="33" viewBox="0 0 32 33" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <g clipPath="url(#clip0)">
                      <path d="M31.2159 16.8447C30.6855 16.1674 29.9846 15.7195 29.1652 15.5751C28.3459 15.4306 27.5341 15.6117 26.867 16.0778C26.8367 14.7753 26.5321 13.5542 26.0274 12.3626C27.8033 12.6109 29.3819 11.3975 29.6814 9.69919C29.9289 7.92682 28.7122 6.35027 27.0105 6.0502C25.2976 5.81304 23.7411 6.9006 23.3786 8.58784C22.4292 7.70699 21.3204 6.99261 20.1672 6.52985C21.5866 5.48297 21.8785 3.459 20.8286 2.04159C19.7788 0.624184 17.7508 0.331454 16.3315 1.37834C14.9863 2.37343 14.6535 4.26049 15.5662 5.71857C14.2613 5.7479 13.038 6.05108 11.8446 6.55407C12.0921 4.7817 10.8754 3.20515 9.17363 2.90509C7.40886 2.59391 5.76715 3.79616 5.51962 5.56852C5.28318 7.27799 6.37385 8.83231 8.0645 9.19528C7.18265 10.1424 6.46769 11.2486 6.00484 12.3993C4.95503 10.9819 2.92705 10.6891 1.5077 11.736C0.0883442 12.7829 -0.20355 14.8069 0.846269 16.2243C1.84415 17.5677 3.73498 17.9011 5.19518 16.9911C5.22546 18.2936 5.53004 19.5147 6.03479 20.7063C4.25893 20.4581 2.68025 21.6714 2.38078 23.3698C2.08132 25.0681 3.34997 26.7187 5.05172 27.0187C6.76456 27.2559 8.32106 26.1683 8.68355 24.4811C9.63302 25.362 10.7418 26.0763 11.895 26.5391C10.4756 27.586 10.1837 29.61 11.2335 31.0274C12.2834 32.4448 14.3113 32.7375 15.7307 31.6906C17.0759 30.6955 17.4087 28.8085 16.496 27.3504C17.8009 27.321 19.0241 27.0179 20.2176 26.5149C19.9701 28.2872 21.1868 29.8638 22.8886 30.1639C24.6644 30.4121 26.2431 29.1988 26.5426 27.5004C26.779 25.791 25.6883 24.2366 23.9977 23.8737C24.8795 22.9266 25.5945 21.8204 26.0573 20.6697C27.1072 22.0871 29.1351 22.3798 30.5545 21.3329C31.9738 20.286 32.2657 18.2621 31.2159 16.8447ZM28.2779 20.6072C27.5846 20.485 27.0209 19.9964 26.8056 19.3747C26.7128 19.1638 26.5459 19.0047 26.2938 18.9602L25.8526 18.8824L22.8903 18.3601C23.0093 19.1594 23.6139 19.7848 24.4332 19.9293L24.8744 20.0071C24.4116 21.1578 23.7707 22.2122 22.9 23.0964L22.6403 22.7263C22.1729 22.0602 21.3127 21.7788 20.5639 21.9711L21.6026 23.4514L21.9662 23.9695L22.5375 24.7836C22.5894 24.8577 22.6414 24.9317 22.7044 24.9428C22.8194 25.0279 22.9454 25.0501 23.0826 25.0095C23.7461 24.9319 24.4061 25.2428 24.8216 25.835C25.4449 26.7232 25.2341 27.9183 24.3558 28.4768C23.4775 29.0354 22.2688 28.8872 21.7086 28.0101C21.2931 27.418 21.2891 26.7038 21.5261 26.097C21.6224 25.9194 21.6037 25.6567 21.4479 25.4347L21.3551 25.2237L19.6412 22.7812C19.2041 23.4176 19.1748 24.3204 19.6423 24.9866L19.902 25.3566C18.7715 25.8707 17.5594 26.111 16.3175 26.1515L16.4062 25.6483C16.5504 24.8305 16.1682 24.0497 15.4562 23.6647L15.1456 25.426L14.9349 26.6211L14.8573 27.0614C14.8129 27.313 14.9057 27.524 15.0726 27.6831C15.5844 28.0976 15.7886 28.7822 15.6777 29.4113C15.4891 30.4806 14.5256 31.1538 13.4541 30.9649C12.3827 30.776 11.7075 29.8138 11.896 28.7444C12.018 28.0525 12.5071 27.4902 13.1298 27.2757C13.3411 27.1832 13.5004 27.0168 13.5448 26.7651L13.6224 26.3248L13.8221 25.1926L14.1326 23.4313C13.3319 23.5496 12.7057 24.1526 12.5615 24.9703L12.4839 25.4106C11.3307 24.9479 10.2739 24.3075 9.38742 23.4378L9.75801 23.1788C10.4251 22.7127 10.7064 21.8543 10.5133 21.1069L8.05626 22.8788L7.69676 23.0748C7.53743 23.2413 7.44113 23.4189 7.39676 23.6705C7.47493 24.3329 7.16385 24.9914 6.57089 25.4057C5.68147 26.0272 4.48394 25.816 3.92373 24.939C3.36352 24.0619 3.51123 22.8557 4.38957 22.2971C4.98252 21.8828 5.698 21.8792 6.3061 22.1162C6.48409 22.2124 6.74729 22.194 6.96965 22.0386L7.78496 21.4689L8.30379 21.1064L9.78617 20.0706C9.14832 19.6339 8.25484 19.5412 7.57668 20.0702L7.20609 20.3291C6.69024 19.2005 6.44869 17.9904 6.40732 16.7508L6.84851 16.8286C7.66787 16.9731 8.44991 16.5921 8.83511 15.8818L5.93584 15.3706L5.49464 15.2928C5.24253 15.2483 5.03127 15.3408 4.87194 15.5072C4.44589 16.0807 3.76015 16.2841 3.06685 16.1618C1.99538 15.9729 1.32021 15.0107 1.50876 13.9414C1.69731 12.872 2.66086 12.1988 3.73233 12.3877C4.42563 12.51 4.98936 12.9985 5.20468 13.6202C5.29746 13.8311 5.46436 13.9903 5.71647 14.0347L7.29216 14.3126L7.35519 14.3237L9.05694 14.6237C8.93792 13.8245 8.33335 13.199 7.51399 13.0545L7.0728 12.9767C7.53564 11.826 8.17648 10.7716 9.04724 9.88742L9.30693 10.2575C9.77435 10.9236 10.6346 11.205 11.3833 11.0128L9.66942 8.57026L9.40974 8.20019C9.25393 7.97814 9.07594 7.8819 8.81273 7.90034C8.14918 7.97792 7.48915 7.66696 7.07366 7.07484C6.45042 6.18665 6.66116 4.99152 7.5395 4.43296C8.42892 3.8115 9.62645 4.02265 10.1867 4.89972C10.6021 5.49185 10.6062 6.206 10.3692 6.81279C10.2729 6.99038 10.2916 7.2531 10.4474 7.47515L11.0187 8.28932L11.3823 8.80742L12.421 10.2877C12.8581 9.65138 12.9504 8.75964 12.4199 8.08239L12.1602 7.71231C13.2907 7.1982 14.5028 6.95793 15.7447 6.91748L15.6671 7.3578C15.5229 8.17552 15.9051 8.95635 16.6171 9.34132L16.9276 7.58007L17.1273 6.44783L17.2049 6.00752C17.2493 5.75591 17.1565 5.54498 16.9896 5.38583C16.4778 4.9713 16.2106 4.2756 16.3326 3.58368C16.5211 2.51435 17.4847 1.8411 18.5561 2.03003C19.6276 2.21896 20.3028 3.18116 20.1142 4.25049C19.9922 4.94241 19.5031 5.50475 18.8804 5.71924C18.6692 5.8117 18.5098 5.97818 18.4655 6.22979L18.3878 6.6701L18.1882 7.80233L17.8776 9.56359C18.6783 9.44534 19.3046 8.84233 19.4487 8.0246L19.5264 7.58429C20.6795 8.04706 21.7364 8.68741 22.6228 9.55715L22.2522 9.81609C21.5852 10.2822 21.3038 11.1406 21.497 11.8881L22.9794 10.8523L23.4982 10.4898L24.3135 9.92011C24.4728 9.75364 24.5691 9.57604 24.6135 9.32444C24.5388 8.27355 25.2836 7.36714 26.3475 7.23045C27.011 7.15288 27.671 7.46383 28.0865 8.05595C28.7098 8.94414 28.499 10.1393 27.6207 10.6978C27.0277 11.1121 26.3123 11.1157 25.7042 10.8788C25.5262 10.7825 25.263 10.801 25.0406 10.9563L24.733 11.2264L22.2871 12.9354C22.925 13.3722 23.8295 13.4019 24.4966 12.9358L24.8672 12.6769C25.383 13.8056 25.6246 15.0156 25.666 16.2552L25.1617 16.1663C24.3424 16.0218 23.5603 16.4028 23.1751 17.1132L24.9399 17.4243L25.0029 17.4354L26.6417 17.7244C26.8938 17.7689 27.105 17.6764 27.2644 17.5099C27.6163 16.9882 28.3131 16.722 28.9434 16.8331C30.0149 17.022 30.69 17.9842 30.5015 19.0536C30.3129 20.1229 29.3494 20.7961 28.2779 20.6072Z" fill="#E1643A"/>
                      <path fillRule="evenodd" clipRule="evenodd" d="M17.8861 17.9974C17.4449 17.9196 17.1964 17.4866 17.2629 17.1092L17.5069 15.7254C17.5846 15.2851 18.0182 15.0372 18.3963 15.1039C18.7745 15.1706 19.0861 15.6147 19.0196 15.9921L18.7756 17.3759C18.6979 17.8163 18.3273 18.0752 17.8861 17.9974ZM17.9992 21.7791C17.8101 21.7458 17.6321 21.6495 17.5282 21.5015C16.4154 20.073 14.4615 19.7285 12.9272 20.6902C12.5566 20.9491 12.0635 20.7973 11.8038 20.4273C11.5441 20.0572 11.6959 19.5651 12.0665 19.3061C14.2679 17.8783 17.1671 18.3895 18.8104 20.4953C19.0701 20.8654 18.9814 21.3686 18.6738 21.6386C18.4626 21.7311 18.2513 21.8236 17.9992 21.7791ZM13.1661 16.3868C13.0995 16.7643 13.3481 17.1972 13.7893 17.275C14.2305 17.3528 14.6011 17.0939 14.6788 16.6536L14.9228 15.2697C14.9893 14.8923 14.6777 14.4482 14.2995 14.3815C13.9214 14.3149 13.4877 14.5627 13.4101 15.003L13.1661 16.3868Z" fill="#E1643A"/>
                      </g>
                      <defs>
                      <clipPath id="clip0">
                      <rect width="32" height="32" fill="white" transform="translate(0 0.535294)"/>
                      </clipPath>
                      </defs>
                    </svg>
                    <span className="small-stat">{this.props.todaysData.testsPositivity}%</span>
                    <span className="small-title">Positive Today</span>
                    <span className="big-stat">{this.props.todaysData.testsCompleted}</span>
                    <h2>Tests Completed</h2>
                  </div>
                </div>
                <div className="sf">
                  <div className="graph">
                    <span className="bar-1 bar-today" style={{height: `${this.state.testsGraph[6]}%` }}>&nbsp;</span>
                    <span className="bar-2" style={{height: `${this.state.testsGraph[5]}%` }}>&nbsp;</span>
                    <span className="bar-3" style={{height: `${this.state.testsGraph[4]}%` }}>&nbsp;</span>
                    <span className="bar-4" style={{height: `${this.state.testsGraph[3]}%` }}>&nbsp;</span>
                    <span className="bar-5" style={{height: `${this.state.testsGraph[2]}%` }}>&nbsp;</span>
                    <span className="bar-6" style={{height: `${this.state.testsGraph[1]}%` }}>&nbsp;</span>
                    <span className="bar-7" style={{height: `${this.state.testsGraph[0]}%` }}>&nbsp;</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="slider-slide slide-3">
              <div className="slide-text">
                <div className="sh">
                  <span className="report-date">{this.props.todaysData.date}</span>
                </div>
                <div className="sb">
                  <div className="sb-inner">
                    <svg width="32" height="33" viewBox="0 0 32 33" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <g clipPath="url(#clip0)">
                      <path d="M31.2159 16.8447C30.6855 16.1674 29.9846 15.7195 29.1652 15.5751C28.3459 15.4306 27.5341 15.6117 26.867 16.0778C26.8367 14.7753 26.5321 13.5542 26.0274 12.3626C27.8033 12.6109 29.3819 11.3975 29.6814 9.69919C29.9289 7.92682 28.7122 6.35027 27.0105 6.0502C25.2976 5.81304 23.7411 6.9006 23.3786 8.58784C22.4292 7.70699 21.3204 6.99261 20.1672 6.52985C21.5866 5.48297 21.8785 3.459 20.8286 2.04159C19.7788 0.624184 17.7508 0.331454 16.3315 1.37834C14.9863 2.37343 14.6535 4.26049 15.5662 5.71857C14.2613 5.7479 13.038 6.05108 11.8446 6.55407C12.0921 4.7817 10.8754 3.20515 9.17363 2.90509C7.40886 2.59391 5.76715 3.79616 5.51962 5.56852C5.28318 7.27799 6.37385 8.83231 8.0645 9.19528C7.18265 10.1424 6.46769 11.2486 6.00484 12.3993C4.95503 10.9819 2.92705 10.6891 1.5077 11.736C0.0883442 12.7829 -0.20355 14.8069 0.846269 16.2243C1.84415 17.5677 3.73498 17.9011 5.19518 16.9911C5.22546 18.2936 5.53004 19.5147 6.03479 20.7063C4.25893 20.4581 2.68025 21.6714 2.38078 23.3698C2.08132 25.0681 3.34997 26.7187 5.05172 27.0187C6.76456 27.2559 8.32106 26.1683 8.68355 24.4811C9.63302 25.362 10.7418 26.0763 11.895 26.5391C10.4756 27.586 10.1837 29.61 11.2335 31.0274C12.2834 32.4448 14.3113 32.7375 15.7307 31.6906C17.0759 30.6955 17.4087 28.8085 16.496 27.3504C17.8009 27.321 19.0241 27.0179 20.2176 26.5149C19.9701 28.2872 21.1868 29.8638 22.8886 30.1639C24.6644 30.4121 26.2431 29.1988 26.5426 27.5004C26.779 25.791 25.6883 24.2366 23.9977 23.8737C24.8795 22.9266 25.5945 21.8204 26.0573 20.6697C27.1072 22.0871 29.1351 22.3798 30.5545 21.3329C31.9738 20.286 32.2657 18.2621 31.2159 16.8447ZM28.2779 20.6072C27.5846 20.485 27.0209 19.9964 26.8056 19.3747C26.7128 19.1638 26.5459 19.0047 26.2938 18.9602L25.8526 18.8824L22.8903 18.3601C23.0093 19.1594 23.6139 19.7848 24.4332 19.9293L24.8744 20.0071C24.4116 21.1578 23.7707 22.2122 22.9 23.0964L22.6403 22.7263C22.1729 22.0602 21.3127 21.7788 20.5639 21.9711L21.6026 23.4514L21.9662 23.9695L22.5375 24.7836C22.5894 24.8577 22.6414 24.9317 22.7044 24.9428C22.8194 25.0279 22.9454 25.0501 23.0826 25.0095C23.7461 24.9319 24.4061 25.2428 24.8216 25.835C25.4449 26.7232 25.2341 27.9183 24.3558 28.4768C23.4775 29.0354 22.2688 28.8872 21.7086 28.0101C21.2931 27.418 21.2891 26.7038 21.5261 26.097C21.6224 25.9194 21.6037 25.6567 21.4479 25.4347L21.3551 25.2237L19.6412 22.7812C19.2041 23.4176 19.1748 24.3204 19.6423 24.9866L19.902 25.3566C18.7715 25.8707 17.5594 26.111 16.3175 26.1515L16.4062 25.6483C16.5504 24.8305 16.1682 24.0497 15.4562 23.6647L15.1456 25.426L14.9349 26.6211L14.8573 27.0614C14.8129 27.313 14.9057 27.524 15.0726 27.6831C15.5844 28.0976 15.7886 28.7822 15.6777 29.4113C15.4891 30.4806 14.5256 31.1538 13.4541 30.9649C12.3827 30.776 11.7075 29.8138 11.896 28.7444C12.018 28.0525 12.5071 27.4902 13.1298 27.2757C13.3411 27.1832 13.5004 27.0168 13.5448 26.7651L13.6224 26.3248L13.8221 25.1926L14.1326 23.4313C13.3319 23.5496 12.7057 24.1526 12.5615 24.9703L12.4839 25.4106C11.3307 24.9479 10.2739 24.3075 9.38742 23.4378L9.75801 23.1788C10.4251 22.7127 10.7064 21.8543 10.5133 21.1069L8.05626 22.8788L7.69676 23.0748C7.53743 23.2413 7.44113 23.4189 7.39676 23.6705C7.47493 24.3329 7.16385 24.9914 6.57089 25.4057C5.68147 26.0272 4.48394 25.816 3.92373 24.939C3.36352 24.0619 3.51123 22.8557 4.38957 22.2971C4.98252 21.8828 5.698 21.8792 6.3061 22.1162C6.48409 22.2124 6.74729 22.194 6.96965 22.0386L7.78496 21.4689L8.30379 21.1064L9.78617 20.0706C9.14832 19.6339 8.25484 19.5412 7.57668 20.0702L7.20609 20.3291C6.69024 19.2005 6.44869 17.9904 6.40732 16.7508L6.84851 16.8286C7.66787 16.9731 8.44991 16.5921 8.83511 15.8818L5.93584 15.3706L5.49464 15.2928C5.24253 15.2483 5.03127 15.3408 4.87194 15.5072C4.44589 16.0807 3.76015 16.2841 3.06685 16.1618C1.99538 15.9729 1.32021 15.0107 1.50876 13.9414C1.69731 12.872 2.66086 12.1988 3.73233 12.3877C4.42563 12.51 4.98936 12.9985 5.20468 13.6202C5.29746 13.8311 5.46436 13.9903 5.71647 14.0347L7.29216 14.3126L7.35519 14.3237L9.05694 14.6237C8.93792 13.8245 8.33335 13.199 7.51399 13.0545L7.0728 12.9767C7.53564 11.826 8.17648 10.7716 9.04724 9.88742L9.30693 10.2575C9.77435 10.9236 10.6346 11.205 11.3833 11.0128L9.66942 8.57026L9.40974 8.20019C9.25393 7.97814 9.07594 7.8819 8.81273 7.90034C8.14918 7.97792 7.48915 7.66696 7.07366 7.07484C6.45042 6.18665 6.66116 4.99152 7.5395 4.43296C8.42892 3.8115 9.62645 4.02265 10.1867 4.89972C10.6021 5.49185 10.6062 6.206 10.3692 6.81279C10.2729 6.99038 10.2916 7.2531 10.4474 7.47515L11.0187 8.28932L11.3823 8.80742L12.421 10.2877C12.8581 9.65138 12.9504 8.75964 12.4199 8.08239L12.1602 7.71231C13.2907 7.1982 14.5028 6.95793 15.7447 6.91748L15.6671 7.3578C15.5229 8.17552 15.9051 8.95635 16.6171 9.34132L16.9276 7.58007L17.1273 6.44783L17.2049 6.00752C17.2493 5.75591 17.1565 5.54498 16.9896 5.38583C16.4778 4.9713 16.2106 4.2756 16.3326 3.58368C16.5211 2.51435 17.4847 1.8411 18.5561 2.03003C19.6276 2.21896 20.3028 3.18116 20.1142 4.25049C19.9922 4.94241 19.5031 5.50475 18.8804 5.71924C18.6692 5.8117 18.5098 5.97818 18.4655 6.22979L18.3878 6.6701L18.1882 7.80233L17.8776 9.56359C18.6783 9.44534 19.3046 8.84233 19.4487 8.0246L19.5264 7.58429C20.6795 8.04706 21.7364 8.68741 22.6228 9.55715L22.2522 9.81609C21.5852 10.2822 21.3038 11.1406 21.497 11.8881L22.9794 10.8523L23.4982 10.4898L24.3135 9.92011C24.4728 9.75364 24.5691 9.57604 24.6135 9.32444C24.5388 8.27355 25.2836 7.36714 26.3475 7.23045C27.011 7.15288 27.671 7.46383 28.0865 8.05595C28.7098 8.94414 28.499 10.1393 27.6207 10.6978C27.0277 11.1121 26.3123 11.1157 25.7042 10.8788C25.5262 10.7825 25.263 10.801 25.0406 10.9563L24.733 11.2264L22.2871 12.9354C22.925 13.3722 23.8295 13.4019 24.4966 12.9358L24.8672 12.6769C25.383 13.8056 25.6246 15.0156 25.666 16.2552L25.1617 16.1663C24.3424 16.0218 23.5603 16.4028 23.1751 17.1132L24.9399 17.4243L25.0029 17.4354L26.6417 17.7244C26.8938 17.7689 27.105 17.6764 27.2644 17.5099C27.6163 16.9882 28.3131 16.722 28.9434 16.8331C30.0149 17.022 30.69 17.9842 30.5015 19.0536C30.3129 20.1229 29.3494 20.7961 28.2779 20.6072Z" fill="#E1643A"/>
                      <path fillRule="evenodd" clipRule="evenodd" d="M17.8861 17.9974C17.4449 17.9196 17.1964 17.4866 17.2629 17.1092L17.5069 15.7254C17.5846 15.2851 18.0182 15.0372 18.3963 15.1039C18.7745 15.1706 19.0861 15.6147 19.0196 15.9921L18.7756 17.3759C18.6979 17.8163 18.3273 18.0752 17.8861 17.9974ZM17.9992 21.7791C17.8101 21.7458 17.6321 21.6495 17.5282 21.5015C16.4154 20.073 14.4615 19.7285 12.9272 20.6902C12.5566 20.9491 12.0635 20.7973 11.8038 20.4273C11.5441 20.0572 11.6959 19.5651 12.0665 19.3061C14.2679 17.8783 17.1671 18.3895 18.8104 20.4953C19.0701 20.8654 18.9814 21.3686 18.6738 21.6386C18.4626 21.7311 18.2513 21.8236 17.9992 21.7791ZM13.1661 16.3868C13.0995 16.7643 13.3481 17.1972 13.7893 17.275C14.2305 17.3528 14.6011 17.0939 14.6788 16.6536L14.9228 15.2697C14.9893 14.8923 14.6777 14.4482 14.2995 14.3815C13.9214 14.3149 13.4877 14.5627 13.4101 15.003L13.1661 16.3868Z" fill="#E1643A"/>
                      </g>
                      <defs>
                      <clipPath id="clip0">
                      <rect width="32" height="32" fill="white" transform="translate(0 0.535294)"/>
                      </clipPath>
                      </defs>
                    </svg>
                    <span className="small-stat">{this.props.todaysData.deathsToday}</span>
                    <span className="small-title">Deaths Today</span>
                    <span className="big-stat">{this.props.todaysData.deathsTotal}</span>
                    <h2>Total Deaths</h2>
                  </div>
                </div>
                <div className="sf">
                  <div className="graph">
                    <span className="bar-1 bar-today" style={{height: `${this.state.deathsGraph[6]}%` }}>&nbsp;</span>
                    <span className="bar-2" style={{height: `${this.state.deathsGraph[5]}%` }}>&nbsp;</span>
                    <span className="bar-3" style={{height: `${this.state.deathsGraph[4]}%` }}>&nbsp;</span>
                    <span className="bar-4" style={{height: `${this.state.deathsGraph[3]}%` }}>&nbsp;</span>
                    <span className="bar-5" style={{height: `${this.state.deathsGraph[2]}%` }}>&nbsp;</span>
                    <span className="bar-6" style={{height: `${this.state.deathsGraph[1]}%` }}>&nbsp;</span>
                    <span className="bar-7" style={{height: `${this.state.deathsGraph[0]}%` }}>&nbsp;</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="slider-slide slide-4">
              <div className="slide-text">
                <div className="sh">
                  <span className="report-date">{this.props.todaysData.date}</span>
                </div>
                <div className="sb">
                  <div className="sb-inner">
                    <svg width="32" height="33" viewBox="0 0 32 33" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <g clipPath="url(#clip0)">
                      <path d="M31.2159 16.8447C30.6855 16.1674 29.9846 15.7195 29.1652 15.5751C28.3459 15.4306 27.5341 15.6117 26.867 16.0778C26.8367 14.7753 26.5321 13.5542 26.0274 12.3626C27.8033 12.6109 29.3819 11.3975 29.6814 9.69919C29.9289 7.92682 28.7122 6.35027 27.0105 6.0502C25.2976 5.81304 23.7411 6.9006 23.3786 8.58784C22.4292 7.70699 21.3204 6.99261 20.1672 6.52985C21.5866 5.48297 21.8785 3.459 20.8286 2.04159C19.7788 0.624184 17.7508 0.331454 16.3315 1.37834C14.9863 2.37343 14.6535 4.26049 15.5662 5.71857C14.2613 5.7479 13.038 6.05108 11.8446 6.55407C12.0921 4.7817 10.8754 3.20515 9.17363 2.90509C7.40886 2.59391 5.76715 3.79616 5.51962 5.56852C5.28318 7.27799 6.37385 8.83231 8.0645 9.19528C7.18265 10.1424 6.46769 11.2486 6.00484 12.3993C4.95503 10.9819 2.92705 10.6891 1.5077 11.736C0.0883442 12.7829 -0.20355 14.8069 0.846269 16.2243C1.84415 17.5677 3.73498 17.9011 5.19518 16.9911C5.22546 18.2936 5.53004 19.5147 6.03479 20.7063C4.25893 20.4581 2.68025 21.6714 2.38078 23.3698C2.08132 25.0681 3.34997 26.7187 5.05172 27.0187C6.76456 27.2559 8.32106 26.1683 8.68355 24.4811C9.63302 25.362 10.7418 26.0763 11.895 26.5391C10.4756 27.586 10.1837 29.61 11.2335 31.0274C12.2834 32.4448 14.3113 32.7375 15.7307 31.6906C17.0759 30.6955 17.4087 28.8085 16.496 27.3504C17.8009 27.321 19.0241 27.0179 20.2176 26.5149C19.9701 28.2872 21.1868 29.8638 22.8886 30.1639C24.6644 30.4121 26.2431 29.1988 26.5426 27.5004C26.779 25.791 25.6883 24.2366 23.9977 23.8737C24.8795 22.9266 25.5945 21.8204 26.0573 20.6697C27.1072 22.0871 29.1351 22.3798 30.5545 21.3329C31.9738 20.286 32.2657 18.2621 31.2159 16.8447ZM28.2779 20.6072C27.5846 20.485 27.0209 19.9964 26.8056 19.3747C26.7128 19.1638 26.5459 19.0047 26.2938 18.9602L25.8526 18.8824L22.8903 18.3601C23.0093 19.1594 23.6139 19.7848 24.4332 19.9293L24.8744 20.0071C24.4116 21.1578 23.7707 22.2122 22.9 23.0964L22.6403 22.7263C22.1729 22.0602 21.3127 21.7788 20.5639 21.9711L21.6026 23.4514L21.9662 23.9695L22.5375 24.7836C22.5894 24.8577 22.6414 24.9317 22.7044 24.9428C22.8194 25.0279 22.9454 25.0501 23.0826 25.0095C23.7461 24.9319 24.4061 25.2428 24.8216 25.835C25.4449 26.7232 25.2341 27.9183 24.3558 28.4768C23.4775 29.0354 22.2688 28.8872 21.7086 28.0101C21.2931 27.418 21.2891 26.7038 21.5261 26.097C21.6224 25.9194 21.6037 25.6567 21.4479 25.4347L21.3551 25.2237L19.6412 22.7812C19.2041 23.4176 19.1748 24.3204 19.6423 24.9866L19.902 25.3566C18.7715 25.8707 17.5594 26.111 16.3175 26.1515L16.4062 25.6483C16.5504 24.8305 16.1682 24.0497 15.4562 23.6647L15.1456 25.426L14.9349 26.6211L14.8573 27.0614C14.8129 27.313 14.9057 27.524 15.0726 27.6831C15.5844 28.0976 15.7886 28.7822 15.6777 29.4113C15.4891 30.4806 14.5256 31.1538 13.4541 30.9649C12.3827 30.776 11.7075 29.8138 11.896 28.7444C12.018 28.0525 12.5071 27.4902 13.1298 27.2757C13.3411 27.1832 13.5004 27.0168 13.5448 26.7651L13.6224 26.3248L13.8221 25.1926L14.1326 23.4313C13.3319 23.5496 12.7057 24.1526 12.5615 24.9703L12.4839 25.4106C11.3307 24.9479 10.2739 24.3075 9.38742 23.4378L9.75801 23.1788C10.4251 22.7127 10.7064 21.8543 10.5133 21.1069L8.05626 22.8788L7.69676 23.0748C7.53743 23.2413 7.44113 23.4189 7.39676 23.6705C7.47493 24.3329 7.16385 24.9914 6.57089 25.4057C5.68147 26.0272 4.48394 25.816 3.92373 24.939C3.36352 24.0619 3.51123 22.8557 4.38957 22.2971C4.98252 21.8828 5.698 21.8792 6.3061 22.1162C6.48409 22.2124 6.74729 22.194 6.96965 22.0386L7.78496 21.4689L8.30379 21.1064L9.78617 20.0706C9.14832 19.6339 8.25484 19.5412 7.57668 20.0702L7.20609 20.3291C6.69024 19.2005 6.44869 17.9904 6.40732 16.7508L6.84851 16.8286C7.66787 16.9731 8.44991 16.5921 8.83511 15.8818L5.93584 15.3706L5.49464 15.2928C5.24253 15.2483 5.03127 15.3408 4.87194 15.5072C4.44589 16.0807 3.76015 16.2841 3.06685 16.1618C1.99538 15.9729 1.32021 15.0107 1.50876 13.9414C1.69731 12.872 2.66086 12.1988 3.73233 12.3877C4.42563 12.51 4.98936 12.9985 5.20468 13.6202C5.29746 13.8311 5.46436 13.9903 5.71647 14.0347L7.29216 14.3126L7.35519 14.3237L9.05694 14.6237C8.93792 13.8245 8.33335 13.199 7.51399 13.0545L7.0728 12.9767C7.53564 11.826 8.17648 10.7716 9.04724 9.88742L9.30693 10.2575C9.77435 10.9236 10.6346 11.205 11.3833 11.0128L9.66942 8.57026L9.40974 8.20019C9.25393 7.97814 9.07594 7.8819 8.81273 7.90034C8.14918 7.97792 7.48915 7.66696 7.07366 7.07484C6.45042 6.18665 6.66116 4.99152 7.5395 4.43296C8.42892 3.8115 9.62645 4.02265 10.1867 4.89972C10.6021 5.49185 10.6062 6.206 10.3692 6.81279C10.2729 6.99038 10.2916 7.2531 10.4474 7.47515L11.0187 8.28932L11.3823 8.80742L12.421 10.2877C12.8581 9.65138 12.9504 8.75964 12.4199 8.08239L12.1602 7.71231C13.2907 7.1982 14.5028 6.95793 15.7447 6.91748L15.6671 7.3578C15.5229 8.17552 15.9051 8.95635 16.6171 9.34132L16.9276 7.58007L17.1273 6.44783L17.2049 6.00752C17.2493 5.75591 17.1565 5.54498 16.9896 5.38583C16.4778 4.9713 16.2106 4.2756 16.3326 3.58368C16.5211 2.51435 17.4847 1.8411 18.5561 2.03003C19.6276 2.21896 20.3028 3.18116 20.1142 4.25049C19.9922 4.94241 19.5031 5.50475 18.8804 5.71924C18.6692 5.8117 18.5098 5.97818 18.4655 6.22979L18.3878 6.6701L18.1882 7.80233L17.8776 9.56359C18.6783 9.44534 19.3046 8.84233 19.4487 8.0246L19.5264 7.58429C20.6795 8.04706 21.7364 8.68741 22.6228 9.55715L22.2522 9.81609C21.5852 10.2822 21.3038 11.1406 21.497 11.8881L22.9794 10.8523L23.4982 10.4898L24.3135 9.92011C24.4728 9.75364 24.5691 9.57604 24.6135 9.32444C24.5388 8.27355 25.2836 7.36714 26.3475 7.23045C27.011 7.15288 27.671 7.46383 28.0865 8.05595C28.7098 8.94414 28.499 10.1393 27.6207 10.6978C27.0277 11.1121 26.3123 11.1157 25.7042 10.8788C25.5262 10.7825 25.263 10.801 25.0406 10.9563L24.733 11.2264L22.2871 12.9354C22.925 13.3722 23.8295 13.4019 24.4966 12.9358L24.8672 12.6769C25.383 13.8056 25.6246 15.0156 25.666 16.2552L25.1617 16.1663C24.3424 16.0218 23.5603 16.4028 23.1751 17.1132L24.9399 17.4243L25.0029 17.4354L26.6417 17.7244C26.8938 17.7689 27.105 17.6764 27.2644 17.5099C27.6163 16.9882 28.3131 16.722 28.9434 16.8331C30.0149 17.022 30.69 17.9842 30.5015 19.0536C30.3129 20.1229 29.3494 20.7961 28.2779 20.6072Z" fill="#E1643A"/>
                      <path fillRule="evenodd" clipRule="evenodd" d="M17.8861 17.9974C17.4449 17.9196 17.1964 17.4866 17.2629 17.1092L17.5069 15.7254C17.5846 15.2851 18.0182 15.0372 18.3963 15.1039C18.7745 15.1706 19.0861 15.6147 19.0196 15.9921L18.7756 17.3759C18.6979 17.8163 18.3273 18.0752 17.8861 17.9974ZM17.9992 21.7791C17.8101 21.7458 17.6321 21.6495 17.5282 21.5015C16.4154 20.073 14.4615 19.7285 12.9272 20.6902C12.5566 20.9491 12.0635 20.7973 11.8038 20.4273C11.5441 20.0572 11.6959 19.5651 12.0665 19.3061C14.2679 17.8783 17.1671 18.3895 18.8104 20.4953C19.0701 20.8654 18.9814 21.3686 18.6738 21.6386C18.4626 21.7311 18.2513 21.8236 17.9992 21.7791ZM13.1661 16.3868C13.0995 16.7643 13.3481 17.1972 13.7893 17.275C14.2305 17.3528 14.6011 17.0939 14.6788 16.6536L14.9228 15.2697C14.9893 14.8923 14.6777 14.4482 14.2995 14.3815C13.9214 14.3149 13.4877 14.5627 13.4101 15.003L13.1661 16.3868Z" fill="#E1643A"/>
                      </g>
                      <defs>
                      <clipPath id="clip0">
                      <rect width="32" height="32" fill="white" transform="translate(0 0.535294)"/>
                      </clipPath>
                      </defs>
                    </svg>
                    <span className="small-stat">{this.props.todaysData.icu} <em>{this.props.todaysData.ventilator}</em></span>
                    <span className="small-title">ICU / Ventilator</span>
                    <span className="big-stat">{this.props.todaysData.hospitalized}</span>
                    <h2>Hospitalized</h2>
                  </div>
                </div>
                <div className="sf">
                  <div className="graph">
                    <span className="bar-1 bar-today" style={{height: `${this.state.hospGraph[6]}%` }}>&nbsp;</span>
                    <span className="bar-2" style={{height: `${this.state.hospGraph[5]}%` }}>&nbsp;</span>
                    <span className="bar-3" style={{height: `${this.state.hospGraph[4]}%` }}>&nbsp;</span>
                    <span className="bar-4" style={{height: `${this.state.hospGraph[3]}%` }}>&nbsp;</span>
                    <span className="bar-5" style={{height: `${this.state.hospGraph[2]}%` }}>&nbsp;</span>
                    <span className="bar-6" style={{height: `${this.state.hospGraph[1]}%` }}>&nbsp;</span>
                    <span className="bar-7" style={{height: `${this.state.hospGraph[0]}%` }}>&nbsp;</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="slider-slide slide-5">
              <div className="slide-text">
                <div className="sh">
                  <span className="report-date">{this.props.todaysData.date}</span>
                </div>
                <div className="sb">
                  <h2>Cases by County</h2>
                  <span className={this.state.countySlideToggle === false ? "cases-button-active" : "cases-button"} onClick={() => this.toggleCountySlide(false)}>Most Cases</span><span className={this.state.countySlideToggle === true ? "region-button-active" : "region-button"} onClick={() => this.toggleCountySlide(true)}>My Region</span>
                  <ul className={this.state.countySlideToggle === false ? "county-list" : "county-list-hide"}>
                      {renderCountyData}
                  </ul>
                  <button className={this.state.locationRetrieved === false ? "get-location-button" : "get-location-button-hide"} onClick={this.getUserLocation}>Get User Location</button>
                  <div className={this.state.countySlideToggle === true && this.state.locationRetrieved === true ? "region-data" : "region-data-hide"}>
                    <span className="big-stat">{this.state.userCountyData.cases}</span>
                    <h2>new infections</h2>
                    <h2>{this.state.userZoneStatus}</h2>
                    <span className="small-title">status</span>

                    <span className="small-title">nearest testing center:</span>
                    <span className="small-title"><em>{this.state.healthUnitData.location_name}</em></span>
                    <span className="small-title">{this.state.healthUnitData.address}</span>
                    <span className="small-title">{this.state.healthUnitData.city} {this.state.healthUnitData.postal_code}</span>
                    <span className="small-title">{this.state.healthUnitData.phone}</span>

                    <span className="small-title">hours</span>
                    <span className="small-title">monday {this.state.healthUnitData.monday}</span>
                    <span className="small-title">tuesday {this.state.healthUnitData.tuesday}</span>
                    <span className="small-title">wednesday {this.state.healthUnitData.wednesday}</span>
                    <span className="small-title">thursday {this.state.healthUnitData.thursday}</span>
                    <span className="small-title">friday {this.state.healthUnitData.friday}</span>
                    <span className="small-title">saturday {this.state.healthUnitData.saturday}</span>
                    <span className="small-title">sunday {this.state.healthUnitData.sunday}</span>
                    
                    <span className="small-title">additional information</span>
                    <span className="small-title">appointments {this.state.healthUnitData.appointments === "Yes" ? "✓" : "X"}</span>
                    <span className="small-title">walk-ins {this.state.healthUnitData.walk_ins === "Yes" ? "✓" : "X"}</span>
                    <span className="small-title">drive-thru {this.state.healthUnitData.drive_through === "Yes" ? "✓" : "X"}</span>
                    <span className="small-title">accessible {this.state.healthUnitData.accessible === "Yes" ? "✓" : "X"}</span>
                    <span className="small-title">french {this.state.healthUnitData.french_language_services === "Yes" ? "✓" : "X"}</span>
                    <span className="small-title">asl interpretation {this.state.healthUnitData.asl_interpretation === "Yes" ? "✓" : "X"}</span>
                    <span className="small-title">parking {this.state.healthUnitData.paid_parking === "Yes" ? "Paid" : "Free"}</span>
                    <span className="small-title"><a href={this.state.healthUnitData.online_appointments}>book online</a></span>

                    <span className="small-title">note:</span>
                    <span className="small-title">{this.state.healthUnitData.additional_information}</span>

                    <span className="small-title">more info:</span>
                    <span className="small-title"><a href={this.state.healthUnitData.website}>{this.state.healthUnitData.website}</a></span>
                  </div>
                </div>
              </div>
            </div>
        </Slider>
    </div>
    );
  }
}

export default simpleSlider;
