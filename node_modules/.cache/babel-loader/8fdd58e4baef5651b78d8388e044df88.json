{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/cranchy/Sites/on-covid/src/components/Home/Home.js\";\nimport React from 'react';\nimport Tabletop from 'tabletop';\nimport SimpleSlider from '../SimpleSlider/SimpleSlider'; // Import css files\n\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport './Home.css'; // const sheetURL = \"14L2_NpdD9oJaHVeGSBNDnmYqdgmakbbscUIsXP-fUic\";\n\nconst tempURL = \"1TGP492L2wqXTz9JV_6bFA7SvlbB6w7_ImbuHblOQdzg\";\n/* IF CHANGE TO PAPA PARSE IS NECESSARY\nCHANGE INIT FUNCTION\n    init(){\n        Papa.parse('https://docs.google.com/spreadsheets/d/14L2_NpdD9oJaHVeGSBNDnmYqdgmakbbscUIsXP-fUic/pub?output=csv', {\n          download: true,\n          header: true,\n          complete: this.populateData\n          }\n        )\n    }\nADD IMPORT\n    import Papa from 'papaparse';\n*/\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      //Increase today or Decrease today based on case growth from previous day\n      //Used in slide 1 of slider\n      newInfectionsIncrease: false,\n      //Ontario-wide data\n      generalData: {\n        date: \"one sec pls\",\n        newInfectionsToday: 0,\n        newInfectionsYesterday: 0,\n        newInfectionsPercentChange: 0,\n        deathsToday: 0,\n        deathsTotal: 0,\n        testsCompleted: 0,\n        testPositivity: 0,\n        hospitalized: 0,\n        icu: 0,\n        icuPercent: 0,\n        ventilator: 0,\n        ventilatorPercent: 0\n      },\n      //Individual county data\n      countyData: \"\",\n      //General data for the entire week\n      pastWeekInfections: \"\"\n    };\n    this.init = this.init.bind(this);\n    this.populateData = this.populateData.bind(this);\n    this.getUserLocation = this.getUserLocation.bind(this);\n    this.displayLocation = this.displayLocation.bind(this);\n  } //runs init method on component mount\n\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentWillUnmount() {} //grabs data from Google spreadsheet and sends to populateData method\n\n\n  init() {\n    this.setState({\n      loading: true\n    });\n    var tabletop = Tabletop.init({\n      key: tempURL,\n      simpleSheet: true,\n      callback: this.populateData,\n      orderby: \"rank\",\n      parseNumbers: true\n    }).then(data => this.populateData(data, tabletop)).catch(err => console.warn(err));\n  }\n\n  populateData(data, tabletop) {\n    //Grab today's stats from \"dataSnapshot\" sheet tab, using last element for today's data\n    let todaysData = tabletop.sheets(\"dataSnapshot\").elements[6]; //Grab county stats from \"countyRank\" sheet tab\n\n    let countyData = tabletop.sheets(\"countyRank\").all(); //Grab historical data from past week from \"dataSnapshot\" sheet tab\n\n    let weeksData = tabletop.sheets(\"dataSnapshot\").all(); //Debug to console\n\n    /*\n    console.log(todaysData);\n    console.log(countyData);\n    console.log(weeksData);\n    */\n    //Set Ontario-wide stats and county stats\n    //County data is left as-is and passed to slider for sake of simplicity\n    //Weekly data is the same\n\n    this.setState({\n      generalData: {\n        date: todaysData.date,\n        newInfectionsToday: todaysData.newInfectionsToday,\n        newInfectionsYesterday: todaysData.newInfectionsYesterday,\n        newInfectionsPercentChange: todaysData.newInfectionsPercentChange,\n        deathsToday: todaysData.deathsToday,\n        deathsTotal: todaysData.deathsTotal,\n        testsCompleted: todaysData.testsCompleted,\n        testsPositivity: todaysData.testsPositivity,\n        hospitalized: todaysData.hospitalized,\n        icu: todaysData.icu,\n        icuPercent: todaysData.icuPercent,\n        ventilator: todaysData.ventilator,\n        ventilatorPercent: todaysData.ventilatorPercent\n      },\n      countyData: countyData,\n      pastWeekInfections: weeksData\n    }); //\"↓ Decrease today\"\n    //\"↑ Increase today\"\n    //Set text based on case growth, used in slide 1 of slider\n\n    if (Math.sign(parseFloat(todaysData.newInfectionsPercentChange)) === 1) this.setState({\n      newInfectionsIncrease: true\n    });else this.setState({\n      newInfectionsIncrease: false\n    });\n    this.setState({\n      loading: false\n    });\n  } //Get user location if they allow it, pass it to display function\n\n\n  getUserLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.displayLocation);\n    } else {\n      console.log(\"Geolocation not supported\");\n    }\n  } //Display user location, currently in console\n\n\n  displayLocation(position) {\n    console.log(\"Lat: \" + position.coords.latitude + \" Long: \" + position.coords.longitude);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [this.getUserLocation(), /*#__PURE__*/_jsxDEV(SimpleSlider, {\n        generalData: this.state.generalData,\n        countyData: this.state.countyData,\n        pastWeekInfections: this.state.pastWeekInfections,\n        newInfectionsIncrease: this.state.newInfectionsIncrease\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/cranchy/Sites/on-covid/src/components/Home/Home.js"],"names":["React","Tabletop","SimpleSlider","tempURL","Home","Component","constructor","props","state","loading","newInfectionsIncrease","generalData","date","newInfectionsToday","newInfectionsYesterday","newInfectionsPercentChange","deathsToday","deathsTotal","testsCompleted","testPositivity","hospitalized","icu","icuPercent","ventilator","ventilatorPercent","countyData","pastWeekInfections","init","bind","populateData","getUserLocation","displayLocation","componentDidMount","componentWillUnmount","setState","tabletop","key","simpleSheet","callback","orderby","parseNumbers","then","data","catch","err","console","warn","todaysData","sheets","elements","all","weeksData","testsPositivity","Math","sign","parseFloat","navigator","geolocation","getCurrentPosition","log","position","coords","latitude","longitude","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Tabletop from 'tabletop';\nimport SimpleSlider from '../SimpleSlider/SimpleSlider'\n\n// Import css files\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport './Home.css';\n\n// const sheetURL = \"14L2_NpdD9oJaHVeGSBNDnmYqdgmakbbscUIsXP-fUic\";\nconst tempURL = \"1TGP492L2wqXTz9JV_6bFA7SvlbB6w7_ImbuHblOQdzg\";\n\n/* IF CHANGE TO PAPA PARSE IS NECESSARY\nCHANGE INIT FUNCTION\n    init(){\n        Papa.parse('https://docs.google.com/spreadsheets/d/14L2_NpdD9oJaHVeGSBNDnmYqdgmakbbscUIsXP-fUic/pub?output=csv', {\n          download: true,\n          header: true,\n          complete: this.populateData\n          }\n        )\n    }\nADD IMPORT\n    import Papa from 'papaparse';\n*/\n\nclass Home extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            loading: false,\n            //Increase today or Decrease today based on case growth from previous day\n            //Used in slide 1 of slider\n            newInfectionsIncrease: false,\n            //Ontario-wide data\n            generalData: {\n                date: \"one sec pls\",\n                newInfectionsToday: 0,\n                newInfectionsYesterday: 0,\n                newInfectionsPercentChange: 0,\n                deathsToday: 0,\n                deathsTotal: 0,\n                testsCompleted: 0,\n                testPositivity: 0,\n                hospitalized: 0,\n                icu: 0,\n                icuPercent: 0,\n                ventilator: 0,\n                ventilatorPercent: 0,\n            },\n            //Individual county data\n            countyData: \"\",\n            //General data for the entire week\n            pastWeekInfections: \"\"\n        }\n        this.init = this.init.bind(this);\n        this.populateData = this.populateData.bind(this);\n        this.getUserLocation = this.getUserLocation.bind(this);\n        this.displayLocation = this.displayLocation.bind(this);\n    }\n\n    //runs init method on component mount\n    componentDidMount(){\n        this.init();\n    }\n\n    componentWillUnmount(){\n\n    }\n\n    //grabs data from Google spreadsheet and sends to populateData method\n    init(){\n        this.setState({ loading: true })\n        var tabletop = Tabletop.init({\n            key: tempURL,\n            simpleSheet: true,\n            callback: this.populateData,\n            orderby: \"rank\",\n            parseNumbers: true\n        })\n        .then((data) => this.populateData(data, tabletop))\n        .catch((err) => console.warn(err))\n    }\n\n    populateData(data, tabletop){\n        //Grab today's stats from \"dataSnapshot\" sheet tab, using last element for today's data\n        let todaysData = tabletop.sheets(\"dataSnapshot\").elements[6];\n        //Grab county stats from \"countyRank\" sheet tab\n        let countyData = tabletop.sheets(\"countyRank\").all();\n        //Grab historical data from past week from \"dataSnapshot\" sheet tab\n        let weeksData = tabletop.sheets(\"dataSnapshot\").all();\n        //Debug to console\n        /*\n        console.log(todaysData);\n        console.log(countyData);\n        console.log(weeksData);\n        */\n        //Set Ontario-wide stats and county stats\n        //County data is left as-is and passed to slider for sake of simplicity\n        //Weekly data is the same\n        this.setState({\n            generalData: {\n                date: todaysData.date,\n                newInfectionsToday: todaysData.newInfectionsToday,\n                newInfectionsYesterday: todaysData.newInfectionsYesterday,\n                newInfectionsPercentChange: todaysData.newInfectionsPercentChange,\n                deathsToday: todaysData.deathsToday,\n                deathsTotal: todaysData.deathsTotal,\n                testsCompleted: todaysData.testsCompleted,\n                testsPositivity: todaysData.testsPositivity,\n                hospitalized: todaysData.hospitalized,\n                icu: todaysData.icu,\n                icuPercent: todaysData.icuPercent,\n                ventilator: todaysData.ventilator,\n                ventilatorPercent: todaysData.ventilatorPercent,\n            },\n            countyData: countyData,\n            pastWeekInfections: weeksData\n        })\n\n        //\"↓ Decrease today\"\n        //\"↑ Increase today\"\n        //Set text based on case growth, used in slide 1 of slider\n        if (Math.sign(parseFloat(todaysData.newInfectionsPercentChange)) === 1)\n            this.setState({ newInfectionsIncrease: true })\n        else\n            this.setState({ newInfectionsIncrease: false })\n        this.setState({ loading: false })\n    }\n\n    //Get user location if they allow it, pass it to display function\n    getUserLocation(){\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.displayLocation);\n        } else {\n           console.log(\"Geolocation not supported\");\n        }\n    }\n\n    //Display user location, currently in console\n    displayLocation(position){\n        console.log(\"Lat: \" + position.coords.latitude + \" Long: \" + position.coords.longitude);\n    }\n\n    render(){\n        return (\n            <div className=\"container\">\n                    {this.getUserLocation()}\n                    <SimpleSlider generalData={this.state.generalData} countyData={this.state.countyData} pastWeekInfections={this.state.pastWeekInfections} newInfectionsIncrease={this.state.newInfectionsIncrease}/>\n            </div>\n        )\n    }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}