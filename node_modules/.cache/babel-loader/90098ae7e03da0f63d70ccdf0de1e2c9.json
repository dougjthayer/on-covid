{"ast":null,"code":"(function () {\n  'use strict';\n\n  var inNodeJS = typeof process !== 'undefined' && !process.browser;\n\n  var request = function requestNotProvided() {\n    throw new Error(\"The 'request' module is only available while running in Node.\");\n  };\n\n  if (inNodeJS) {\n    // This will get stripped out by Uglify, and Webpack will not include it\n    var axios = require('axios');\n  }\n\n  var supportsCORS = false;\n  var inLegacyIE = false;\n\n  try {\n    var testXHR = new XMLHttpRequest();\n\n    if (typeof testXHR.withCredentials !== 'undefined') {\n      supportsCORS = true;\n    } else {\n      if ('XDomainRequest' in window) {\n        supportsCORS = true;\n        inLegacyIE = true;\n      }\n    }\n  } catch (e) {} // Create a simple indexOf function for support\n  // of older browsers.  Uses native indexOf if\n  // available.  Code similar to underscores.\n  // By making a separate function, instead of adding\n  // to the prototype, we will not break bad for loops\n  // in older browsers\n\n\n  var indexOfProto = Array.prototype.indexOf;\n\n  var ttIndexOf = function (array, item) {\n    var i = 0,\n        l = array.length;\n\n    if (indexOfProto && array.indexOf === indexOfProto) {\n      return array.indexOf(item);\n    }\n\n    for (; i < l; i++) {\n      if (array[i] === item) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n  /*\r\n    Initialize with Tabletop.init( { key: '0AjAPaAU9MeLFdHUxTlJiVVRYNGRJQnRmSnQwTlpoUXc' } )\r\n      OR!\r\n    Initialize with Tabletop.init( { key: 'https://docs.google.com/spreadsheet/pub?hl=en_US&hl=en_US&key=0AjAPaAU9MeLFdHUxTlJiVVRYNGRJQnRmSnQwTlpoUXc&output=html&widget=true' } )\r\n      OR!\r\n    Initialize with Tabletop.init('0AjAPaAU9MeLFdHUxTlJiVVRYNGRJQnRmSnQwTlpoUXc')\r\n  */\n\n\n  var Tabletop = function (options) {\n    // Make sure Tabletop is being used as a constructor no matter what.\n    if (!this || !(this instanceof Tabletop)) {\n      return new Tabletop(options);\n    }\n\n    if (typeof options === 'string') {\n      options = {\n        key: options\n      };\n    }\n\n    this.callback = options.callback;\n    this.error = options.error;\n    this.wanted = options.wanted || [];\n    this.key = options.key;\n    this.simpleSheet = !!options.simpleSheet;\n    this.parseNumbers = !!options.parseNumbers;\n    this.wait = !!options.wait;\n    this.reverse = !!options.reverse;\n    this.postProcess = options.postProcess;\n    this.debug = !!options.debug;\n    this.query = options.query || '';\n    this.orderby = options.orderby;\n    this.endpoint = options.endpoint || 'https://spreadsheets.google.com';\n    this.singleton = !!options.singleton;\n    this.simpleUrl = !!(options.simpleUrl || options.simple_url); //jshint ignore:line\n\n    this.authkey = options.authkey;\n    this.sheetPrivacy = this.authkey ? 'private' : 'public';\n    this.callbackContext = options.callbackContext; // Default to on, unless there's a proxy, in which case it's default off\n\n    this.prettyColumnNames = typeof options.prettyColumnNames === 'undefined' ? !options.proxy : options.prettyColumnNames;\n\n    if (typeof options.proxy !== 'undefined') {\n      // Remove trailing slash, it will break the app\n      this.endpoint = options.proxy.replace(/\\/$/, '');\n      this.simpleUrl = true;\n      this.singleton = true; // Let's only use CORS (straight JSON request) when\n      // fetching straight from Google\n\n      supportsCORS = false;\n    }\n\n    this.parameterize = options.parameterize || false;\n\n    if (this.singleton) {\n      if (typeof Tabletop.singleton !== 'undefined') {\n        this.log('WARNING! Tabletop singleton already defined');\n      }\n\n      Tabletop.singleton = this;\n    }\n    /* Be friendly about what you accept */\n\n\n    if (/key=/.test(this.key)) {\n      this.log('You passed an old Google Docs url as the key! Attempting to parse.');\n      this.key = this.key.match('key=(.*?)(&|#|$)')[1];\n    }\n\n    if (/pubhtml/.test(this.key)) {\n      this.log('You passed a new Google Spreadsheets url as the key! Attempting to parse.');\n      this.key = this.key.match('d\\\\/(.*?)\\\\/pubhtml')[1];\n    }\n\n    if (/spreadsheets\\/d/.test(this.key)) {\n      this.log('You passed the most recent version of Google Spreadsheets url as the key! Attempting to parse.');\n      this.key = this.key.match('d\\\\/(.*?)\\/')[1];\n    }\n\n    if (!this.key) {\n      this.log('You need to pass Tabletop a key!');\n      return;\n    }\n\n    this.log('Initializing with key ' + this.key);\n    this.models = {};\n    this.modelNames = [];\n    this.model_names = this.modelNames; //jshint ignore:line\n\n    this.baseJsonPath = '/feeds/worksheets/' + this.key + '/' + this.sheetPrivacy + '/basic?alt=';\n\n    if (inNodeJS || supportsCORS) {\n      this.baseJsonPath += 'json';\n    } else {\n      this.baseJsonPath += 'json-in-script';\n    }\n\n    if (this.authkey) {\n      this.baseJsonPath += '&oauth_token=' + this.authkey;\n    }\n\n    if (!this.wait) {\n      return this.fetch();\n    }\n  }; // A global storage for callbacks.\n\n\n  Tabletop.callbacks = {}; // Backwards compatibility.\n\n  Tabletop.init = function (options) {\n    return new Tabletop(options);\n  };\n\n  Tabletop.sheets = function () {\n    this.log('Times have changed! You\\'ll want to use var tabletop = Tabletop.init(...); tabletop.sheets(...); instead of Tabletop.sheets(...)');\n  };\n\n  Tabletop.prototype = {\n    fetch: function (callback) {\n      var self = this;\n      return new Promise(function (resolve, reject) {\n        if (typeof callback !== 'undefined') {\n          self.callback = callback;\n        }\n\n        if (!self.callback) {\n          self.callback = resolve;\n        }\n\n        if (!self.error) {\n          self.error = reject;\n        }\n\n        self.requestData(self.baseJsonPath, self.loadSheets);\n      });\n    },\n\n    /*\r\n      This will call the environment appropriate request method.\r\n        In browser it will use JSON-P, in node it will use axios.get()\r\n    */\n    requestData: function (path, callback) {\n      this.log('Requesting', path);\n      this.encounteredError = false;\n\n      if (inNodeJS) {\n        this.serverSideFetch(path, callback);\n      } else {\n        //CORS only works in IE8/9 across the same protocol\n        //You must have your server on HTTPS to talk to Google, or it'll fall back on injection\n        var protocol = this.endpoint.split('//').shift() || 'http';\n\n        if (supportsCORS && (!inLegacyIE || protocol === location.protocol)) {\n          this.xhrFetch(path, callback);\n        } else {\n          this.injectScript(path, callback);\n        }\n      }\n    },\n\n    /*\r\n      Use Cross-Origin XMLHttpRequest to get the data in browsers that support it.\r\n    */\n    xhrFetch: function (path, callback) {\n      //support IE8's separate cross-domain object\n      var xhr = inLegacyIE ? new XDomainRequest() : new XMLHttpRequest();\n      xhr.open('GET', this.endpoint + path);\n      var self = this;\n\n      xhr.onload = function () {\n        var json;\n\n        try {\n          json = JSON.parse(xhr.responseText);\n        } catch (e) {\n          console.error(e);\n        }\n\n        callback.call(self, json);\n      };\n\n      if (this.error) {\n        xhr.addEventListener('error', this.error);\n      }\n\n      xhr.send();\n    },\n\n    /*\r\n      Insert the URL into the page as a script tag. Once it's loaded the spreadsheet data\r\n      it triggers the callback. This helps you avoid cross-domain errors\r\n      http://code.google.com/apis/gdata/samples/spreadsheet_sample.html\r\n        Let's be plain-Jane and not use jQuery or anything.\r\n    */\n    injectScript: function (path, callback) {\n      var script = document.createElement('script');\n      var callbackName;\n\n      if (this.singleton) {\n        if (callback === this.loadSheets) {\n          callbackName = 'Tabletop.singleton.loadSheets';\n        } else if (callback === this.loadSheet) {\n          callbackName = 'Tabletop.singleton.loadSheet';\n        }\n      } else {\n        var self = this;\n        callbackName = 'tt' + +new Date() + Math.floor(Math.random() * 100000); // Create a temp callback which will get removed once it has executed,\n        // this allows multiple instances of Tabletop to coexist.\n\n        Tabletop.callbacks[callbackName] = function () {\n          var args = Array.prototype.slice.call(arguments, 0);\n          callback.apply(self, args);\n          script.parentNode.removeChild(script);\n          delete Tabletop.callbacks[callbackName];\n        };\n\n        callbackName = 'Tabletop.callbacks.' + callbackName;\n      }\n\n      var url = path + '&callback=' + callbackName;\n\n      if (this.simpleUrl) {\n        // We've gone down a rabbit hole of passing injectScript the path, so let's\n        // just pull the sheet_id out of the path like the least efficient worker bees\n        if (path.indexOf('/list/') !== -1) {\n          script.src = this.endpoint + '/' + this.key + '-' + path.split('/')[4];\n        } else {\n          script.src = this.endpoint + '/' + this.key;\n        }\n      } else {\n        script.src = this.endpoint + url;\n      }\n\n      if (this.parameterize) {\n        script.src = this.parameterize + encodeURIComponent(script.src);\n      }\n\n      this.log('Injecting', script.src);\n      document.getElementsByTagName('script')[0].parentNode.appendChild(script);\n    },\n\n    /*\r\n      This will only run if tabletop is being run in node.js\r\n    */\n    serverSideFetch: function (path, callback) {\n      var self = this;\n      axios.get(this.endpoint + path).then(function (response) {\n        callback.call(self, response.data);\n      }).catch(function (err) {\n        if (err) {\n          return console.error(err);\n        }\n      });\n    },\n\n    /*\r\n      Is this a sheet you want to pull?\r\n      If { wanted: [\"Sheet1\"] } has been specified, only Sheet1 is imported\r\n      Pulls all sheets if none are specified\r\n    */\n    isWanted: function (sheetName) {\n      if (this.wanted.length === 0) {\n        return true;\n      } else {\n        return ttIndexOf(this.wanted, sheetName) !== -1;\n      }\n    },\n\n    /*\r\n      What gets send to the callback\r\n      if simpleSheet === true, then don't return an array of Tabletop.this.models,\r\n      only return the first one's elements\r\n    */\n    data: function () {\n      // If the instance is being queried before the data's been fetched\n      // then return undefined.\n      if (this.modelNames.length === 0) {\n        return undefined;\n      }\n\n      if (this.simpleSheet) {\n        if (this.modelNames.length > 1 && this.debug) {\n          this.log('WARNING You have more than one sheet but are using simple sheet mode! Don\\'t blame me when something goes wrong.');\n        }\n\n        return this.models[this.modelNames[0]].all();\n      } else {\n        return this.models;\n      }\n    },\n\n    /*\r\n      Add another sheet to the wanted list\r\n    */\n    addWanted: function (sheet) {\n      if (ttIndexOf(this.wanted, sheet) === -1) {\n        this.wanted.push(sheet);\n      }\n    },\n\n    /*\r\n      Load all worksheets of the spreadsheet, turning each into a Tabletop Model.\r\n      Need to use injectScript because the worksheet view that you're working from\r\n      doesn't actually include the data. The list-based feed (/feeds/list/key..) does, though.\r\n      Calls back to loadSheet in order to get the real work done.\r\n        Used as a callback for the worksheet-based JSON\r\n    */\n    loadSheets: function (data) {\n      var i, ilen;\n      var toLoad = [];\n\n      try {\n        this.googleSheetName = data.feed.title.$t;\n      } catch (err) {\n        this.error(err);\n        return;\n      }\n\n      this.foundSheetNames = [];\n\n      for (i = 0, ilen = data.feed.entry.length; i < ilen; i++) {\n        this.foundSheetNames.push(data.feed.entry[i].title.$t); // Only pull in desired sheets to reduce loading\n\n        if (this.isWanted(data.feed.entry[i].content.$t)) {\n          var linkIdx = data.feed.entry[i].link.length - 1;\n          var sheetId = data.feed.entry[i].link[linkIdx].href.split('/').pop();\n          var jsonPath = '/feeds/list/' + this.key + '/' + sheetId + '/' + this.sheetPrivacy + '/values?alt=';\n\n          if (inNodeJS || supportsCORS) {\n            jsonPath += 'json';\n          } else {\n            jsonPath += 'json-in-script';\n          }\n\n          if (this.query) {\n            // Query Language Reference (0.7)\n            jsonPath += '&tq=' + this.query;\n          }\n\n          if (this.orderby) {\n            jsonPath += '&orderby=column:' + this.orderby.toLowerCase();\n          }\n\n          if (this.reverse) {\n            jsonPath += '&reverse=true';\n          }\n\n          if (this.authkey) {\n            jsonPath += '&oauth_token=' + this.authkey;\n          }\n\n          toLoad.push(jsonPath);\n        }\n      }\n\n      this.sheetsToLoad = toLoad.length;\n\n      for (i = 0, ilen = toLoad.length; i < ilen; i++) {\n        this.requestData(toLoad[i], this.loadSheet);\n      }\n    },\n\n    /*\r\n      Access layer for the this.models\r\n      .sheets() gets you all of the sheets\r\n      .sheets('Sheet1') gets you the sheet named Sheet1\r\n    */\n    sheets: function (sheetName) {\n      if (typeof sheetName === 'undefined') {\n        return this.models;\n      } else {\n        if (typeof this.models[sheetName] === 'undefined') {\n          // alert( \"Can't find \" + sheetName );\n          return;\n        } else {\n          return this.models[sheetName];\n        }\n      }\n    },\n    sheetReady: function (model) {\n      this.models[model.name] = model;\n\n      if (ttIndexOf(this.modelNames, model.name) === -1) {\n        this.modelNames.push(model.name);\n      }\n\n      this.sheetsToLoad--;\n\n      if (this.sheetsToLoad === 0) {\n        this.doCallback();\n      }\n    },\n\n    /*\r\n      Parse a single list-based worksheet, turning it into a Tabletop Model\r\n        Used as a callback for the list-based JSON\r\n    */\n    loadSheet: function (data) {\n      var that = this;\n      new Tabletop.Model({\n        data: data,\n        parseNumbers: this.parseNumbers,\n        postProcess: this.postProcess,\n        tabletop: this,\n        prettyColumnNames: this.prettyColumnNames,\n        onReady: function () {\n          that.sheetReady(this);\n        }\n      });\n    },\n\n    /*\r\n      Execute the callback upon loading! Rely on this.data() because you might\r\n        only request certain pieces of data (i.e. simpleSheet mode)\r\n      Tests this.sheetsToLoad just in case a race condition happens to show up\r\n    */\n    doCallback: function () {\n      if (this.sheetsToLoad === 0) {\n        this.callback.apply(this.callbackContext || this, [this.data(), this]);\n      }\n    },\n    log: function () {\n      if (this.debug) {\n        if (typeof console !== 'undefined' && typeof console.log !== 'undefined') {\n          Function.prototype.apply.apply(console.log, [console, arguments]);\n        }\n      }\n    }\n  };\n  /*\r\n    Tabletop.Model stores the attribute names and parses the worksheet data\r\n      to turn it into something worthwhile\r\n      Options should be in the format { data: XXX }, with XXX being the list-based worksheet\r\n  */\n\n  Tabletop.Model = function (options) {\n    var i, j, ilen, jlen;\n    this.columnNames = [];\n    this.column_names = this.columnNames; // jshint ignore:line\n\n    this.name = options.data.feed.title.$t;\n    this.tabletop = options.tabletop;\n    this.elements = [];\n    this.onReady = options.onReady;\n    this.raw = options.data; // A copy of the sheet's raw data, for accessing minutiae\n\n    if (typeof options.data.feed.entry === 'undefined') {\n      options.tabletop.log('Missing data for ' + this.name + ', make sure you didn\\'t forget column headers');\n      this.originalColumns = [];\n      this.elements = [];\n      this.ready();\n      return;\n    }\n\n    for (var key in options.data.feed.entry[0]) {\n      if (/^gsx/.test(key)) {\n        this.columnNames.push(key.replace('gsx$', ''));\n      }\n    }\n\n    this.originalColumns = this.columnNames;\n    this.original_columns = this.originalColumns; // jshint ignore:line\n\n    for (i = 0, ilen = options.data.feed.entry.length; i < ilen; i++) {\n      var source = options.data.feed.entry[i];\n      var element = {};\n\n      for (j = 0, jlen = this.columnNames.length; j < jlen; j++) {\n        var cell = source['gsx$' + this.columnNames[j]];\n\n        if (typeof cell !== 'undefined') {\n          if (options.parseNumbers && cell.$t !== '' && !isNaN(cell.$t)) {\n            element[this.columnNames[j]] = +cell.$t;\n          } else {\n            element[this.columnNames[j]] = cell.$t;\n          }\n        } else {\n          element[this.columnNames[j]] = '';\n        }\n      }\n\n      if (element.rowNumber === undefined) {\n        element.rowNumber = i + 1;\n      }\n\n      this.elements.push(element);\n    }\n\n    if (options.prettyColumnNames) {\n      this.fetchPrettyColumns();\n    } else {\n      this.ready();\n    }\n  };\n\n  Tabletop.Model.prototype = {\n    /*\r\n      Returns all of the elements (rows) of the worksheet as objects\r\n    */\n    all: function () {\n      return this.elements;\n    },\n    fetchPrettyColumns: function () {\n      if (!this.raw.feed.link[3]) {\n        return this.ready();\n      }\n\n      var cellurl = this.raw.feed.link[3].href.replace('/feeds/list/', '/feeds/cells/').replace('https://spreadsheets.google.com', '');\n      var that = this;\n      this.tabletop.requestData(cellurl, function (data) {\n        that.loadPrettyColumns(data);\n      });\n    },\n    beforeReady: function () {\n      if (this.tabletop.postProcess) {\n        for (var i = 0, ilen = this.elements.length; i < ilen; i++) {\n          this.tabletop.postProcess(this.elements[i]);\n        }\n      }\n    },\n    ready: function () {\n      this.beforeReady();\n      this.onReady.call(this);\n    },\n\n    /*\r\n     * Store column names as an object\r\n     * with keys of Google-formatted \"columnName\"\r\n     * and values of human-readable \"Column name\"\r\n     */\n    loadPrettyColumns: function (data) {\n      var prettyColumns = {};\n      var columnNames = this.columnNames;\n      var i = 0;\n      var l = columnNames.length;\n\n      for (; i < l; i++) {\n        if (typeof data.feed.entry[i].content.$t !== 'undefined') {\n          prettyColumns[columnNames[i]] = data.feed.entry[i].content.$t;\n        } else {\n          prettyColumns[columnNames[i]] = columnNames[i];\n        }\n      }\n\n      this.prettyColumns = prettyColumns;\n      this.pretty_columns = this.prettyColumns; // jshint ignore:line\n\n      this.prettifyElements();\n      this.ready();\n    },\n\n    /*\r\n     * Go through each row, substitutiting\r\n     * Google-formatted \"columnName\"\r\n     * with human-readable \"Column name\"\r\n     */\n    prettifyElements: function () {\n      var prettyElements = [],\n          orderedPrettyNames = [],\n          i,\n          j,\n          ilen,\n          jlen;\n\n      for (j = 0, jlen = this.columnNames.length; j < jlen; j++) {\n        orderedPrettyNames.push(this.prettyColumns[this.columnNames[j]]);\n      }\n\n      for (i = 0, ilen = this.elements.length; i < ilen; i++) {\n        var newElement = {};\n\n        for (j = 0, jlen = this.columnNames.length; j < jlen; j++) {\n          var newColumnName = this.prettyColumns[this.columnNames[j]];\n          newElement[newColumnName] = this.elements[i][this.columnNames[j]];\n        }\n\n        prettyElements.push(newElement);\n      }\n\n      this.elements = prettyElements;\n      this.columnNames = orderedPrettyNames;\n    },\n\n    /*\r\n      Return the elements as an array of arrays, instead of an array of objects\r\n    */\n    toArray: function () {\n      var array = [],\n          i,\n          j,\n          ilen,\n          jlen;\n\n      for (i = 0, ilen = this.elements.length; i < ilen; i++) {\n        var row = [];\n\n        for (j = 0, jlen = this.columnNames.length; j < jlen; j++) {\n          row.push(this.elements[i][this.columnNames[j]]);\n        }\n\n        array.push(row);\n      }\n\n      return array;\n    }\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    //don't just use inNodeJS, we may be in Browserify\n    module.exports = Tabletop;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return Tabletop;\n    });\n  } else {\n    window.Tabletop = Tabletop;\n  }\n})();","map":{"version":3,"sources":["C:/Users/Doug/Desktop/on-covid/node_modules/tabletop/src/tabletop.js"],"names":["inNodeJS","process","browser","request","requestNotProvided","Error","axios","require","supportsCORS","inLegacyIE","testXHR","XMLHttpRequest","withCredentials","window","e","indexOfProto","Array","prototype","indexOf","ttIndexOf","array","item","i","l","length","Tabletop","options","key","callback","error","wanted","simpleSheet","parseNumbers","wait","reverse","postProcess","debug","query","orderby","endpoint","singleton","simpleUrl","simple_url","authkey","sheetPrivacy","callbackContext","prettyColumnNames","proxy","replace","parameterize","log","test","match","models","modelNames","model_names","baseJsonPath","fetch","callbacks","init","sheets","self","Promise","resolve","reject","requestData","loadSheets","path","encounteredError","serverSideFetch","protocol","split","shift","location","xhrFetch","injectScript","xhr","XDomainRequest","open","onload","json","JSON","parse","responseText","console","call","addEventListener","send","script","document","createElement","callbackName","loadSheet","Date","Math","floor","random","args","slice","arguments","apply","parentNode","removeChild","url","src","encodeURIComponent","getElementsByTagName","appendChild","get","then","response","data","catch","err","isWanted","sheetName","undefined","all","addWanted","sheet","push","ilen","toLoad","googleSheetName","feed","title","$t","foundSheetNames","entry","content","linkIdx","link","sheetId","href","pop","jsonPath","toLowerCase","sheetsToLoad","sheetReady","model","name","doCallback","that","Model","tabletop","onReady","Function","j","jlen","columnNames","column_names","elements","raw","originalColumns","ready","original_columns","source","element","cell","isNaN","rowNumber","fetchPrettyColumns","cellurl","loadPrettyColumns","beforeReady","prettyColumns","pretty_columns","prettifyElements","prettyElements","orderedPrettyNames","newElement","newColumnName","toArray","row","module","exports","define","amd"],"mappings":"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","sourcesContent":["(function() {\r\n  'use strict';\r\n\r\n  var inNodeJS = typeof process !== 'undefined' && !process.browser;\r\n\r\n  var request = function requestNotProvided() {\r\n    throw new Error(\"The 'request' module is only available while running in Node.\");\r\n  };\r\n  if(inNodeJS) { // This will get stripped out by Uglify, and Webpack will not include it\r\n    var axios = require('axios');\r\n  }\r\n\r\n  var supportsCORS = false;\r\n  var inLegacyIE = false;\r\n  try {\r\n    var testXHR = new XMLHttpRequest();\r\n    if (typeof testXHR.withCredentials !== 'undefined') {\r\n      supportsCORS = true;\r\n    } else {\r\n      if ('XDomainRequest' in window) {\r\n        supportsCORS = true;\r\n        inLegacyIE = true;\r\n      }\r\n    }\r\n  } catch (e) { }\r\n\r\n  // Create a simple indexOf function for support\r\n  // of older browsers.  Uses native indexOf if\r\n  // available.  Code similar to underscores.\r\n  // By making a separate function, instead of adding\r\n  // to the prototype, we will not break bad for loops\r\n  // in older browsers\r\n  var indexOfProto = Array.prototype.indexOf;\r\n  var ttIndexOf = function(array, item) {\r\n    var i = 0, l = array.length;\r\n\r\n    if (indexOfProto && array.indexOf === indexOfProto) {\r\n      return array.indexOf(item);\r\n    }\r\n\r\n    for (; i < l; i++) {\r\n      if (array[i] === item) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  };\r\n\r\n  /*\r\n    Initialize with Tabletop.init( { key: '0AjAPaAU9MeLFdHUxTlJiVVRYNGRJQnRmSnQwTlpoUXc' } )\r\n      OR!\r\n    Initialize with Tabletop.init( { key: 'https://docs.google.com/spreadsheet/pub?hl=en_US&hl=en_US&key=0AjAPaAU9MeLFdHUxTlJiVVRYNGRJQnRmSnQwTlpoUXc&output=html&widget=true' } )\r\n      OR!\r\n    Initialize with Tabletop.init('0AjAPaAU9MeLFdHUxTlJiVVRYNGRJQnRmSnQwTlpoUXc')\r\n  */\r\n\r\n  var Tabletop = function(options) {\r\n    // Make sure Tabletop is being used as a constructor no matter what.\r\n    if(!this || !(this instanceof Tabletop)) {\r\n      return new Tabletop(options);\r\n    }\r\n\r\n    if(typeof(options) === 'string') {\r\n      options = { key : options };\r\n    }\r\n\r\n    this.callback = options.callback;\r\n    this.error = options.error;\r\n    this.wanted = options.wanted || [];\r\n    this.key = options.key;\r\n    this.simpleSheet = !!options.simpleSheet;\r\n    this.parseNumbers = !!options.parseNumbers;\r\n    this.wait = !!options.wait;\r\n    this.reverse = !!options.reverse;\r\n    this.postProcess = options.postProcess;\r\n    this.debug = !!options.debug;\r\n    this.query = options.query || '';\r\n    this.orderby = options.orderby;\r\n    this.endpoint = options.endpoint || 'https://spreadsheets.google.com';\r\n    this.singleton = !!options.singleton;\r\n    this.simpleUrl = !!(options.simpleUrl || options.simple_url); //jshint ignore:line\r\n    this.authkey = options.authkey;\r\n    this.sheetPrivacy = this.authkey ? 'private' : 'public';\r\n\r\n    this.callbackContext = options.callbackContext;\r\n    // Default to on, unless there's a proxy, in which case it's default off\r\n    this.prettyColumnNames = typeof(options.prettyColumnNames) === 'undefined' ? !options.proxy : options.prettyColumnNames;\r\n\r\n    if(typeof(options.proxy) !== 'undefined') {\r\n      // Remove trailing slash, it will break the app\r\n      this.endpoint = options.proxy.replace(/\\/$/,'');\r\n      this.simpleUrl = true;\r\n      this.singleton = true;\r\n      // Let's only use CORS (straight JSON request) when\r\n      // fetching straight from Google\r\n      supportsCORS = false;\r\n    }\r\n\r\n    this.parameterize = options.parameterize || false;\r\n\r\n    if (this.singleton) {\r\n      if (typeof(Tabletop.singleton) !== 'undefined') {\r\n        this.log('WARNING! Tabletop singleton already defined');\r\n      }\r\n      Tabletop.singleton = this;\r\n    }\r\n\r\n    /* Be friendly about what you accept */\r\n    if (/key=/.test(this.key)) {\r\n      this.log('You passed an old Google Docs url as the key! Attempting to parse.');\r\n      this.key = this.key.match('key=(.*?)(&|#|$)')[1];\r\n    }\r\n\r\n    if (/pubhtml/.test(this.key)) {\r\n      this.log('You passed a new Google Spreadsheets url as the key! Attempting to parse.');\r\n      this.key = this.key.match('d\\\\/(.*?)\\\\/pubhtml')[1];\r\n    }\r\n\r\n    if(/spreadsheets\\/d/.test(this.key)) {\r\n      this.log('You passed the most recent version of Google Spreadsheets url as the key! Attempting to parse.');\r\n      this.key = this.key.match('d\\\\/(.*?)\\/')[1];\r\n    }\r\n\r\n    if (!this.key) {\r\n      this.log('You need to pass Tabletop a key!');\r\n      return;\r\n    }\r\n\r\n    this.log('Initializing with key ' + this.key);\r\n\r\n    this.models = {};\r\n    this.modelNames = [];\r\n    this.model_names = this.modelNames; //jshint ignore:line\r\n\r\n    this.baseJsonPath = '/feeds/worksheets/' + this.key + '/' + this.sheetPrivacy +'/basic?alt=';\r\n\r\n    if (inNodeJS || supportsCORS) {\r\n      this.baseJsonPath += 'json';\r\n    } else {\r\n      this.baseJsonPath += 'json-in-script';\r\n    }\r\n\r\n    if (this.authkey) {\r\n      this.baseJsonPath += '&oauth_token=' + this.authkey;\r\n    }\r\n  \r\n    if(!this.wait) {\r\n      return this.fetch();\r\n    }\r\n  };\r\n\r\n  // A global storage for callbacks.\r\n  Tabletop.callbacks = {};\r\n\r\n  // Backwards compatibility.\r\n  Tabletop.init = function(options) {\r\n    return new Tabletop(options);\r\n  };\r\n\r\n  Tabletop.sheets = function() {\r\n    this.log('Times have changed! You\\'ll want to use var tabletop = Tabletop.init(...); tabletop.sheets(...); instead of Tabletop.sheets(...)');\r\n  };\r\n\r\n  Tabletop.prototype = {\r\n\r\n    fetch: function(callback) {\r\n      var self = this;\r\n      return new Promise(function(resolve, reject) {\r\n        if (typeof(callback) !== 'undefined') {\r\n          self.callback = callback;\r\n        }\r\n        if (!self.callback) {\r\n          self.callback = resolve;\r\n        }\r\n        if (!self.error) {\r\n          self.error = reject;\r\n        }\r\n        self.requestData(self.baseJsonPath, self.loadSheets);\r\n      });\r\n    },\r\n\r\n    /*\r\n      This will call the environment appropriate request method.\r\n\r\n      In browser it will use JSON-P, in node it will use axios.get()\r\n    */\r\n    requestData: function(path, callback) {\r\n      this.log('Requesting', path);\r\n      this.encounteredError = false;\r\n      if (inNodeJS) {\r\n        this.serverSideFetch(path, callback);\r\n      } else {\r\n        //CORS only works in IE8/9 across the same protocol\r\n        //You must have your server on HTTPS to talk to Google, or it'll fall back on injection\r\n        var protocol = this.endpoint.split('//').shift() || 'http';\r\n        if (supportsCORS && (!inLegacyIE || protocol === location.protocol)) {\r\n          this.xhrFetch(path, callback);\r\n        } else {\r\n          this.injectScript(path, callback);\r\n        }\r\n      }\r\n    },\r\n\r\n    /*\r\n      Use Cross-Origin XMLHttpRequest to get the data in browsers that support it.\r\n    */\r\n    xhrFetch: function(path, callback) {\r\n      //support IE8's separate cross-domain object\r\n      var xhr = inLegacyIE ? new XDomainRequest() : new XMLHttpRequest();\r\n      xhr.open('GET', this.endpoint + path);\r\n      var self = this;\r\n      xhr.onload = function() {\r\n        var json;\r\n        try {\r\n          json = JSON.parse(xhr.responseText);\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n        callback.call(self, json);\r\n      };\r\n      if(this.error) {\r\n        xhr.addEventListener('error', this.error);\r\n      }\r\n      xhr.send();\r\n    },\r\n\r\n    /*\r\n      Insert the URL into the page as a script tag. Once it's loaded the spreadsheet data\r\n      it triggers the callback. This helps you avoid cross-domain errors\r\n      http://code.google.com/apis/gdata/samples/spreadsheet_sample.html\r\n\r\n      Let's be plain-Jane and not use jQuery or anything.\r\n    */\r\n    injectScript: function(path, callback) {\r\n      var script = document.createElement('script');\r\n      var callbackName;\r\n\r\n      if (this.singleton) {\r\n        if (callback === this.loadSheets) {\r\n          callbackName = 'Tabletop.singleton.loadSheets';\r\n        } else if (callback === this.loadSheet) {\r\n          callbackName = 'Tabletop.singleton.loadSheet';\r\n        }\r\n      } else {\r\n        var self = this;\r\n        callbackName = 'tt' + (+new Date()) + (Math.floor(Math.random()*100000));\r\n        // Create a temp callback which will get removed once it has executed,\r\n        // this allows multiple instances of Tabletop to coexist.\r\n        Tabletop.callbacks[ callbackName ] = function () {\r\n          var args = Array.prototype.slice.call( arguments, 0 );\r\n          callback.apply(self, args);\r\n          script.parentNode.removeChild(script);\r\n          delete Tabletop.callbacks[callbackName];\r\n        };\r\n        callbackName = 'Tabletop.callbacks.' + callbackName;\r\n      }\r\n\r\n      var url = path + '&callback=' + callbackName;\r\n\r\n      if (this.simpleUrl) {\r\n        // We've gone down a rabbit hole of passing injectScript the path, so let's\r\n        // just pull the sheet_id out of the path like the least efficient worker bees\r\n        if(path.indexOf('/list/') !== -1) {\r\n          script.src = this.endpoint + '/' + this.key + '-' + path.split('/')[4];\r\n        } else {\r\n          script.src = this.endpoint + '/' + this.key;\r\n        }\r\n      } else {\r\n        script.src = this.endpoint + url;\r\n      }\r\n\r\n      if (this.parameterize) {\r\n        script.src = this.parameterize + encodeURIComponent(script.src);\r\n      }\r\n\r\n      this.log('Injecting', script.src);\r\n\r\n      document.getElementsByTagName('script')[0].parentNode.appendChild(script);\r\n    },\r\n\r\n    /*\r\n      This will only run if tabletop is being run in node.js\r\n    */\r\n    serverSideFetch: function(path, callback) {\r\n      var self = this;\r\n\r\n      axios.get(this.endpoint + path)\r\n        .then(function(response) {\r\n          callback.call(self, response.data);\r\n        })\r\n        .catch(function(err) {\r\n          if (err) {\r\n            return console.error(err);\r\n          }\r\n        });\r\n    },\r\n\r\n    /*\r\n      Is this a sheet you want to pull?\r\n      If { wanted: [\"Sheet1\"] } has been specified, only Sheet1 is imported\r\n      Pulls all sheets if none are specified\r\n    */\r\n    isWanted: function(sheetName) {\r\n      if (this.wanted.length === 0) {\r\n        return true;\r\n      } else {\r\n        return (ttIndexOf(this.wanted, sheetName) !== -1);\r\n      }\r\n    },\r\n\r\n    /*\r\n      What gets send to the callback\r\n      if simpleSheet === true, then don't return an array of Tabletop.this.models,\r\n      only return the first one's elements\r\n    */\r\n    data: function() {\r\n      // If the instance is being queried before the data's been fetched\r\n      // then return undefined.\r\n      if (this.modelNames.length === 0) {\r\n        return undefined;\r\n      }\r\n      if (this.simpleSheet) {\r\n        if (this.modelNames.length > 1 && this.debug) {\r\n          this.log('WARNING You have more than one sheet but are using simple sheet mode! Don\\'t blame me when something goes wrong.');\r\n        }\r\n        return this.models[this.modelNames[0]].all();\r\n      } else {\r\n        return this.models;\r\n      }\r\n    },\r\n\r\n    /*\r\n      Add another sheet to the wanted list\r\n    */\r\n    addWanted: function(sheet) {\r\n      if(ttIndexOf(this.wanted, sheet) === -1) {\r\n        this.wanted.push(sheet);\r\n      }\r\n    },\r\n\r\n    /*\r\n      Load all worksheets of the spreadsheet, turning each into a Tabletop Model.\r\n      Need to use injectScript because the worksheet view that you're working from\r\n      doesn't actually include the data. The list-based feed (/feeds/list/key..) does, though.\r\n      Calls back to loadSheet in order to get the real work done.\r\n\r\n      Used as a callback for the worksheet-based JSON\r\n    */\r\n    loadSheets: function(data) {\r\n      var i, ilen;\r\n      var toLoad = [];\r\n      try {\r\n        this.googleSheetName = data.feed.title.$t;\r\n      } catch(err) {\r\n        this.error(err);\r\n        return;\r\n      }\r\n      this.foundSheetNames = [];\r\n\r\n      for (i = 0, ilen = data.feed.entry.length; i < ilen ; i++) {\r\n        this.foundSheetNames.push(data.feed.entry[i].title.$t);\r\n        // Only pull in desired sheets to reduce loading\r\n        if (this.isWanted(data.feed.entry[i].content.$t)) {\r\n          var linkIdx = data.feed.entry[i].link.length-1;\r\n          var sheetId = data.feed.entry[i].link[linkIdx].href.split('/').pop();\r\n          var jsonPath = '/feeds/list/' + this.key + '/' + sheetId + '/' + this.sheetPrivacy + '/values?alt=';\r\n          if (inNodeJS || supportsCORS) {\r\n            jsonPath += 'json';\r\n          } else {\r\n            jsonPath += 'json-in-script';\r\n          }\r\n          if (this.query) {\r\n            // Query Language Reference (0.7)\r\n            jsonPath += '&tq=' + this.query;\r\n          }\r\n          if (this.orderby) {\r\n            jsonPath += '&orderby=column:' + this.orderby.toLowerCase();\r\n          }\r\n          if (this.reverse) {\r\n            jsonPath += '&reverse=true';\r\n          }\r\n          if (this.authkey) {\r\n            jsonPath += '&oauth_token=' + this.authkey;\r\n          }\r\n          toLoad.push(jsonPath);\r\n        }\r\n      }\r\n\r\n      this.sheetsToLoad = toLoad.length;\r\n      for(i = 0, ilen = toLoad.length; i < ilen; i++) {\r\n        this.requestData(toLoad[i], this.loadSheet);\r\n      }\r\n    },\r\n\r\n    /*\r\n      Access layer for the this.models\r\n      .sheets() gets you all of the sheets\r\n      .sheets('Sheet1') gets you the sheet named Sheet1\r\n    */\r\n    sheets: function(sheetName) {\r\n      if (typeof sheetName === 'undefined') {\r\n        return this.models;\r\n      } else {\r\n        if (typeof(this.models[sheetName]) === 'undefined') {\r\n          // alert( \"Can't find \" + sheetName );\r\n          return;\r\n        } else {\r\n          return this.models[sheetName];\r\n        }\r\n      }\r\n    },\r\n\r\n    sheetReady: function(model) {\r\n      this.models[model.name] = model;\r\n      if (ttIndexOf(this.modelNames, model.name) === -1) {\r\n        this.modelNames.push(model.name);\r\n      }\r\n\r\n      this.sheetsToLoad--;\r\n      if (this.sheetsToLoad === 0) {\r\n        this.doCallback();\r\n      }\r\n    },\r\n\r\n    /*\r\n      Parse a single list-based worksheet, turning it into a Tabletop Model\r\n\r\n      Used as a callback for the list-based JSON\r\n    */\r\n    loadSheet: function(data) {\r\n      var that = this;\r\n      new Tabletop.Model({\r\n        data: data,\r\n        parseNumbers: this.parseNumbers,\r\n        postProcess: this.postProcess,\r\n        tabletop: this,\r\n        prettyColumnNames: this.prettyColumnNames,\r\n        onReady: function() {\r\n          that.sheetReady(this);\r\n        }\r\n      });\r\n    },\r\n\r\n    /*\r\n      Execute the callback upon loading! Rely on this.data() because you might\r\n        only request certain pieces of data (i.e. simpleSheet mode)\r\n      Tests this.sheetsToLoad just in case a race condition happens to show up\r\n    */\r\n    doCallback: function() {\r\n      if(this.sheetsToLoad === 0) {\r\n        this.callback.apply(this.callbackContext || this, [this.data(), this]);\r\n      }\r\n    },\r\n\r\n    log: function() {\r\n      if(this.debug) {\r\n        if(typeof console !== 'undefined' && typeof console.log !== 'undefined') {\r\n          Function.prototype.apply.apply(console.log, [console, arguments]);\r\n        }\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  /*\r\n    Tabletop.Model stores the attribute names and parses the worksheet data\r\n      to turn it into something worthwhile\r\n\r\n    Options should be in the format { data: XXX }, with XXX being the list-based worksheet\r\n  */\r\n  Tabletop.Model = function(options) {\r\n    var i, j, ilen, jlen;\r\n    this.columnNames = [];\r\n    this.column_names = this.columnNames; // jshint ignore:line\r\n    this.name = options.data.feed.title.$t;\r\n    this.tabletop = options.tabletop;\r\n    this.elements = [];\r\n    this.onReady = options.onReady;\r\n    this.raw = options.data; // A copy of the sheet's raw data, for accessing minutiae\r\n\r\n    if (typeof(options.data.feed.entry) === 'undefined') {\r\n      options.tabletop.log('Missing data for ' + this.name + ', make sure you didn\\'t forget column headers');\r\n      this.originalColumns = [];\r\n      this.elements = [];\r\n      this.ready();\r\n      return;\r\n    }\r\n\r\n    for (var key in options.data.feed.entry[0]){\r\n      if (/^gsx/.test(key)) {\r\n        this.columnNames.push(key.replace('gsx$',''));\r\n      }\r\n    }\r\n\r\n    this.originalColumns = this.columnNames;\r\n    this.original_columns = this.originalColumns; // jshint ignore:line\r\n\r\n    for (i = 0, ilen =  options.data.feed.entry.length ; i < ilen; i++) {\r\n      var source = options.data.feed.entry[i];\r\n      var element = {};\r\n      for (j = 0, jlen = this.columnNames.length; j < jlen ; j++) {\r\n        var cell = source['gsx$' + this.columnNames[j]];\r\n        if (typeof(cell) !== 'undefined') {\r\n          if (options.parseNumbers && cell.$t !== '' && !isNaN(cell.$t)) {\r\n            element[this.columnNames[j]] = +cell.$t;\r\n          } else {\r\n            element[this.columnNames[j]] = cell.$t;\r\n          }\r\n        } else {\r\n          element[this.columnNames[j]] = '';\r\n        }\r\n      }\r\n      if (element.rowNumber === undefined) {\r\n        element.rowNumber = i + 1;\r\n      }\r\n\r\n      this.elements.push(element);\r\n    }\r\n\r\n    if (options.prettyColumnNames) {\r\n      this.fetchPrettyColumns();\r\n    } else {\r\n      this.ready();\r\n    }\r\n  };\r\n\r\n  Tabletop.Model.prototype = {\r\n    /*\r\n      Returns all of the elements (rows) of the worksheet as objects\r\n    */\r\n    all: function() {\r\n      return this.elements;\r\n    },\r\n\r\n    fetchPrettyColumns: function() {\r\n      if (!this.raw.feed.link[3]) {\r\n        return this.ready();\r\n      }\r\n\r\n      var cellurl = this.raw.feed.link[3].href.replace('/feeds/list/', '/feeds/cells/').replace('https://spreadsheets.google.com', '');\r\n      var that = this;\r\n      this.tabletop.requestData(cellurl, function(data) {\r\n        that.loadPrettyColumns(data);\r\n      });\r\n    },\r\n\r\n    beforeReady: function() {\r\n      if(this.tabletop.postProcess) {\r\n        for (var i = 0, ilen = this.elements.length; i < ilen; i++) {\r\n          this.tabletop.postProcess(this.elements[i]);\r\n        }\r\n      }\r\n    },\r\n\r\n    ready: function() {\r\n      this.beforeReady();\r\n      this.onReady.call(this);\r\n    },\r\n\r\n    /*\r\n     * Store column names as an object\r\n     * with keys of Google-formatted \"columnName\"\r\n     * and values of human-readable \"Column name\"\r\n     */\r\n    loadPrettyColumns: function(data) {\r\n      var prettyColumns = {};\r\n\r\n      var columnNames = this.columnNames;\r\n\r\n      var i = 0;\r\n      var l = columnNames.length;\r\n\r\n      for (; i < l; i++) {\r\n        if (typeof data.feed.entry[i].content.$t !== 'undefined') {\r\n          prettyColumns[columnNames[i]] = data.feed.entry[i].content.$t;\r\n        } else {\r\n          prettyColumns[columnNames[i]] = columnNames[i];\r\n        }\r\n      }\r\n\r\n      this.prettyColumns = prettyColumns;\r\n      this.pretty_columns = this.prettyColumns; // jshint ignore:line\r\n      this.prettifyElements();\r\n      this.ready();\r\n    },\r\n\r\n    /*\r\n     * Go through each row, substitutiting\r\n     * Google-formatted \"columnName\"\r\n     * with human-readable \"Column name\"\r\n     */\r\n    prettifyElements: function() {\r\n      var prettyElements = [],\r\n          orderedPrettyNames = [],\r\n          i, j, ilen, jlen;\r\n\r\n      for (j = 0, jlen = this.columnNames.length; j < jlen ; j++) {\r\n        orderedPrettyNames.push(this.prettyColumns[this.columnNames[j]]);\r\n      }\r\n\r\n      for (i = 0, ilen = this.elements.length; i < ilen; i++) {\r\n        var newElement = {};\r\n        for (j = 0, jlen = this.columnNames.length; j < jlen ; j++) {\r\n          var newColumnName = this.prettyColumns[this.columnNames[j]];\r\n          newElement[newColumnName] = this.elements[i][this.columnNames[j]];\r\n        }\r\n        prettyElements.push(newElement);\r\n      }\r\n      this.elements = prettyElements;\r\n      this.columnNames = orderedPrettyNames;\r\n    },\r\n\r\n    /*\r\n      Return the elements as an array of arrays, instead of an array of objects\r\n    */\r\n    toArray: function() {\r\n      var array = [],\r\n          i, j, ilen, jlen;\r\n      for (i = 0, ilen = this.elements.length; i < ilen; i++) {\r\n        var row = [];\r\n        for (j = 0, jlen = this.columnNames.length; j < jlen ; j++) {\r\n          row.push(this.elements[i][ this.columnNames[j]]);\r\n        }\r\n        array.push(row);\r\n      }\r\n\r\n      return array;\r\n    }\r\n  };\r\n\r\n  if(typeof module !== 'undefined' && module.exports) { //don't just use inNodeJS, we may be in Browserify\r\n    module.exports = Tabletop;\r\n  } else if (typeof define === 'function' && define.amd) {\r\n    define(function () {\r\n      return Tabletop;\r\n    });\r\n  } else {\r\n    window.Tabletop = Tabletop;\r\n  }\r\n\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}